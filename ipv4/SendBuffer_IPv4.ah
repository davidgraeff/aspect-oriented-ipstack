// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "../router/Interface.h"
#include "ipstack/SendBuffer.h"
#include "IPv4.h"
#include "util/types.h"


using namespace ipstack;

/**
 * Set the IPv4 header
 */
aspect Sendbuffer_IPv4 {
	advice execution("% ipstack::%_Socket::estimateSendBufferMinSize()") && result(v) :
		after(unsigned v) {
		// check ip version
		if (tjp->that()->m_useipversion == 4) {
			*tjp->result() = v + tjp->that()->ipv4.getSpecificHeaderSize();
			//printf("Sendbuffer_IPv4 plus %i size: %i\n", tjp->that()->ipv4.getSpecificHeaderSize(), *tjp->result());
		}
	}

	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") && args(sendbuffer) :
		around(SendBuffer* sendbuffer) {

		// check ip version
		if (tjp->that()->m_useipversion == 4) {
			sendbuffer->memstart_ip = sendbuffer->data;
			IPv4_Packet* ip = (IPv4_Packet*)sendbuffer->data;
			tjp->that()->ipv4.setupHeader(ip, sendbuffer->getRemainingSize());
			sendbuffer->writtenToDataPointer(tjp->that()->ipv4.getSpecificHeaderSize());
			//printf("Sendbuffer_IPv4. Data written %u \n", (char*)sendbuffer->data - (char*)sendbuffer->getDataStart());

			// set pointer to next header field
			sendbuffer->nextheaderfield_ip = ip->get_nextheaderPointer();
		}
		tjp->proceed();
	}
};
