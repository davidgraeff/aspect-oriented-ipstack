#ifndef __DEMUX_IPV4_UDP_SLICE__
#define __DEMUX_IPV4_UDP_SLICE__

#include "util/types.h"
#include "IPv4_UDP_Socket.h"

using namespace ipstack;

slice class Demux_IPv4_UDP_Slice {
  private:
  UInt16 ipv4_udp_last_default_port;
  IPv4_UDP_Socket* ipv4_udp_head_socket;

  bool bind(IPv4_UDP_Socket* socket) {
    UInt16 sport = socket->get_sport();
    if(sport == UDP_Packet::UNUSED_PORT){
      //choose 'random' source port number
      socket->set_sport(ipv4_udp_get_free_port());
    }
    else{
      //verify if sport is not used already
      IPv4_UDP_Socket* current = ipv4_udp_head_socket;
      while(current != 0){
        if(current->get_sport() == sport){
          //error, sport already in use
          return false;
        }
        current = current->getNext();
      }
    }
    //insert at front
    socket->setNext(ipv4_udp_head_socket);
    ipv4_udp_head_socket = socket;
    return true;
  }  
    
  void unbind(IPv4_UDP_Socket* socket) {
    if(socket == ipv4_udp_head_socket){
      ipv4_udp_head_socket = socket->getNext();
    }
    else{
      IPv4_UDP_Socket* current = ipv4_udp_head_socket;
      IPv4_UDP_Socket* next = current->getNext();
      while(next != 0){
        if(next == socket){
          current->setNext(next->getNext());
          return;
        }
        current = next;
        next = current->getNext();
      }
    }
  }
  
  
  UInt16 ipv4_udp_get_free_port(){
    ipv4_udp_last_default_port++;
    if(ipv4_udp_last_default_port < 1024U){
      ipv4_udp_last_default_port = 1024U;
    }
    IPv4_UDP_Socket* current = ipv4_udp_head_socket;
    while(current != 0){
      if(current->get_sport() == ipv4_udp_last_default_port){
        ipv4_udp_last_default_port++;
        if(ipv4_udp_last_default_port < 1024U){
          ipv4_udp_last_default_port = 1024U;
        }
        current = ipv4_udp_head_socket; //start once again
      }
      else{
        current = current->getNext();
      }
    }
    return ipv4_udp_last_default_port;
  }
};

#endif /* __DEMUX_IPV4_UDP_SLICE__ */

