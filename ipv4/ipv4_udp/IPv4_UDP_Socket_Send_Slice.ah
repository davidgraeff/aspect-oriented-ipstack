#ifndef __IPV4_UDP_SOCKET_SEND_SLICE__
#define __IPV4_UDP_SOCKET_SEND_SLICE__

using namespace ipstack;

slice class IPv4_UDP_Socket_Send_Slice {
  public:
  bool send(const void* data, unsigned datasize);
  unsigned get_max_data_size();
};

slice bool IPv4_UDP_Socket_Send_Slice::send(const void* data, unsigned datasize){
  if(!IPv4_Socket::hasValidInterface()){
    return false;
  }
  UDP_Packet* packet = UDP_Socket::createPacket(data, datasize);
  if(packet != 0){
    IPv4_Socket::send(packet, datasize + UDP_Packet::UDP_HEADER_SIZE, UDP_Packet::IPV4_TYPE_UDP);
    while(!IPv4_Socket::hasBeenSent(packet)); // Sending is very fast, so polling is ok!
    UDP_Socket::free(packet);
    return true;
  }
  return false;
}

slice unsigned IPv4_UDP_Socket_Send_Slice::get_max_data_size(){
  unsigned maxdatasize = IPv4_Socket::getMTU();
  if(maxdatasize > UDP_Packet::UDP_HEADER_SIZE){
    return (maxdatasize - UDP_Packet::UDP_HEADER_SIZE);
  }
  return 0;
}

#endif // __IPV4_UDP_SOCKET_SEND_SLICE__ 

