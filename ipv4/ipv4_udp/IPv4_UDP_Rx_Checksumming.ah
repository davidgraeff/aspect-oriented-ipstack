#ifndef __IPV4_UDP_RX_CHECKSUMMING_AH__
#define __IPV4_UDP_RX_CHECKSUMMING_AH__

#include "../IPv4.h"
#include "../../udp/UDP.h"
#include "../../router/Interface.h"
#include "../../demux/Demux.h"
#include "../InternetChecksum.h"

using namespace ipstack;


aspect IPv4_UDP_Rx_Checksumming {
  
  // *** Affect class: Demux
  // advice ordering: always execute this aspect before 'IPv4_UDP_Receive' !
  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") :
         order("IPv4_UDP_Rx_Checksumming" , "IPv4_UDP_Receive");
  
  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) && that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){

    if(packet->get_protocol() == UDP_Packet::IPV4_TYPE_UDP){
      //we have a udp packet
      if(len < (IPv4_Packet::IPV4_MIN_HEADER_SIZE + UDP_Packet::UDP_HEADER_SIZE)){
        return; //len too small!
      }
      
      UDP_Packet* udp_packet = (UDP_Packet*) packet->get_data();
      
      if(udp_packet->get_checksum() != 0){
        //this packet is protected by an internet checksum
        if(InternetChecksum::valid(packet, interface) == false){
          return;
        }
      }
    }
    tjp->proceed();
  }
  
};

#endif // __IPV4_UDP_RX_CHECKSUMMING_AH__

