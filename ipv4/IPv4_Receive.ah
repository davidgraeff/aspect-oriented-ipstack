// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPV4_RECEIVE_AH__
#define __IPV4_RECEIVE_AH__

#include "IPv4.h"
#include "../demux/Demux.h"
#include "../router/Interface.h"
#include "Demux_IPv4_Slice.ah"

using namespace ipstack;

aspect IPv4_Receive {
  /* Affect class: Demux */
  advice "ipstack::Demux" : slice Demux_IPv4_Slice;

  // advice ordering: always execute this aspect first!
  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") : 
    order( "IPv4_Receive", "%" && !"IPv4_Receive" );

  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) && that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){

    //is the receiving interface running ipv4?
    if(interface->isIPv4Up() == false){
      //discard packets on down interfaces
      return;
    }

    len = packet->validPacketLength(len); //strip packet (e.g. ethernet padding)
    if(len == 0){
      //invalid packet length
      return;
    }
    *(tjp->arg<1>()) = len; //update function parameter (for other aspects)
    //packet length seems to be ok
    
    if(packet->get_version() != IPv4_Packet::IPV4_VERSION){
      //no ipv4 packet
      return;
    }
        
    //verify IPv4 header checksum:
    if(packet->validPacketChecksum() == false){
      //TODO: don't do that for offloading?!
      return;
    }
    //IPv4 packet has passed all verification check so far ...
    if(packet->get_dst_ipaddr() == interface->ipv4_addr){
      //this packet is destined for this local host
      
      UInt16 fragment_offset = packet->get_fragment_offset();
      if( (packet->get_flags() == IPv4_Packet::IPV4_MF_FLAG) || (fragment_offset != 0) ) {
        //this is a fragmented ipv4 packet. try to reassemble ...
        if(demux.ipv4_reassemble(packet, len, interface, fragment_offset * 8) == false) {
          return; //reassembling failed
        }
      }
      
      //no fragment or reassembled fragment
      tjp->proceed(); // continue ipv4_demux(...)
    }
    else{
      //this packet has to be routed elsewhere
      demux.ipv4_forward(packet, len, interface);
    }
  }
  
  advice execution("void ipstack::Demux::demux(const void*, unsigned, ipstack::Interface*)") &&
         args(data, len, interface) && that(demux) :
         after(const void* data, unsigned len, Interface* interface, Demux& demux){
    
    //try to demux raw ipv4 packet (without any additional link-layer headers)
    demux.ipv4_demux((IPv4_Packet*) data, len, interface);
  }
   
};

#endif // __IPV4_RECEIVE_AH__
