// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPV4_ICMP_PROTOCOL_UNREACHABLE_AH__
#define __IPV4_ICMP_PROTOCOL_UNREACHABLE_AH__

#include "../IPv4.h"
#include "../InternetChecksum.h"
#include "../../demux/Demux.h"
#include "../../router/Interface.h"
#include "../../icmp/ICMP.h"

using namespace ipstack;


aspect IPv4_ICMP_Protocol_Unreachable {
  // *** Affect class: Demux
  // advice ordering: always execute this aspect as last for 'ipv4_demux' !
  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") :
         order(!"IPv4_ICMP_Protocol_Unreachable" , "IPv4_ICMP_Protocol_Unreachable");
  
  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) && that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){

	if((packet->get_protocol() == ICMP_Packet::IPV4_TYPE_ICMP) || (packet->get_fragment_offset() != 0)){
		return;
	}

   	if(demux.ipv4_icmp_packet_isFree()){
    	demux.ipv4_icmp_setup(packet, len, interface);
    	
    	IPv4_Packet* reply_packet = demux.ipv4_icmp_reply_packet.get_IPv4_Packet();
    	ICMP_Packet* reply_icmp = demux.ipv4_icmp_reply_packet.get_ICMP_Packet();
    	
    	reply_icmp->set_type(ICMP_Packet::ICMP_TYPE_DESTINATION_UNREACHABLE);
    	reply_icmp->set_code(ICMP_Packet::ICMP_CODE_PROTOCOL_UNREACHABLE);
    	memcpy(reply_icmp->get_data(), packet, packet->get_ihl()*4+8);
    	
    	reply_packet->set_total_len(8 + packet->get_ihl()*4 + ICMP_Packet::ICMP_HEADER_SIZE + reply_packet->get_ihl()*4); 
    	reply_icmp->set_checksum(InternetChecksum::computePayloadChecksum(reply_packet, interface)); //TODO: Tx Offloading? [causes incorrect checksum!]
 		
 		demux.ipv4_icmp_send(packet, reply_packet->get_total_len(), interface);
	}
	    
	return; // last aspect anyway
  }
  
};

#endif //__IPV4_ICMP_PROTOCOL_UNREACHABLE_AH__
