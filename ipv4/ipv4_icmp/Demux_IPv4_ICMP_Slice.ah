#ifndef __DEMUX_IPV4_ICMP_SLICE__
#define __DEMUX_IPV4_ICMP_SLICE__

#include "util/types.h"
#include "../IPv4.h"
#include "../../icmp/ICMP.h"
#include "../../router/Interface.h"

using namespace ipstack;

slice class Demux_IPv4_ICMP_Slice {
  private:
  
  enum { ICMP_LINK_LAYER_HEADER_SIZE = 14 }; //TODO

  struct {
    UInt8 link_layer[ICMP_LINK_LAYER_HEADER_SIZE];
    UInt8 ipv4_packet[IPv4_Packet::IPV4_MIN_HEADER_SIZE];
    UInt8 icmp_header[ICMP_Packet::ICMP_HEADER_SIZE];
    UInt8 data[ICMP_Packet::ICMP_MAX_DATA_SIZE];
    Interface* interface; //for hasBeenSent()
    
    IPv4_Packet* get_IPv4_Packet() { return (IPv4_Packet*) ipv4_packet; }
    ICMP_Packet* get_ICMP_Packet() { return (ICMP_Packet*) icmp_header; }
    
    void init(){
      //IPv4
      get_IPv4_Packet()->set_ihl(IPv4_Packet::IPV4_MIN_HEADER_SIZE/4);
      get_IPv4_Packet()->set_version(IPv4_Packet::IPV4_VERSION);
      get_IPv4_Packet()->set_tos(IPv4_Packet::IPV4_DEFAULT_TOS);
      get_IPv4_Packet()->set_total_len(IPv4_Packet::IPV4_MIN_HEADER_SIZE + ICMP_Packet::ICMP_HEADER_SIZE);
      get_IPv4_Packet()->set_id(0);
      get_IPv4_Packet()->set_flags(IPv4_Packet::IPV4_DEFAULT_FLAGS);
      get_IPv4_Packet()->set_fragment_offset(IPv4_Packet::IPV4_NO_FRAGMENT_OFFSET);
      get_IPv4_Packet()->set_ttl(IPv4_Packet::IPV4_DEFAULT_TTL);
      get_IPv4_Packet()->set_protocol(ICMP_Packet::IPV4_TYPE_ICMP);
      get_IPv4_Packet()->clearChecksum();
    }
  } ipv4_icmp_reply_packet;
  
  bool ipv4_icmp_packet_isFree(){
    if(ipv4_icmp_reply_packet.interface == 0){
      return true;
    }
    return ipv4_icmp_reply_packet.interface->hasBeenSent(ipv4_icmp_reply_packet.get_IPv4_Packet());
  }  
  
  void ipv4_icmp_setup(IPv4_Packet* packet, unsigned len, Interface* interface){
    ipv4_icmp_reply_packet.init();
    
    ipv4_icmp_reply_packet.interface = interface;
    
    //IPv4
    ipv4_icmp_reply_packet.get_IPv4_Packet()->set_src_ipaddr(interface->getIPv4Addr());
    ipv4_icmp_reply_packet.get_IPv4_Packet()->set_dst_ipaddr(packet->get_src_ipaddr());
    
    //ICMP
    ipv4_icmp_reply_packet.get_ICMP_Packet()->set_checksum(0);
    ipv4_icmp_reply_packet.get_ICMP_Packet()->set_quench(0);
  }
  
  
  void ipv4_icmp_send(IPv4_Packet* packet, unsigned len, Interface* interface){
  	ipv4_icmp_reply_packet.get_IPv4_Packet()->computeChecksum(); //software checksumming    
    interface->send(ipv4_icmp_reply_packet.get_IPv4_Packet(), ipv4_icmp_reply_packet.get_IPv4_Packet()->get_total_len());
  }
  
  void icmp_demux(IPv4_Packet* packet, unsigned len, Interface* interface){
    //Aspects to be weaved here!
    //printf("ICMP packet arrived\r\n");
  }
};

#endif /* __DEMUX_IPV4_ICMP_SLICE__ */

