// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPv4_ICMP_ECHO_REPLY_AH__
#define __IPv4_ICMP_ECHO_REPLY_AH__

#include "../../demux/Demux.h"
#include "../../router/Interface.h"
#include "../InternetChecksum.h"
#include "../../icmp/ICMP.h"

using namespace ipstack;

aspect IPv4_ICMP_Echo_Reply {
	
  // *** Affect class: Demux
  advice execution("void ipstack::Demux::icmp_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) && that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){

    ICMP_Packet* icmp_packet = (ICMP_Packet*) packet->get_data();
    if((icmp_packet->get_type() == ICMP_Packet::ICMP_TYPE_ECHO_REQUEST) && (icmp_packet->get_code() == ICMP_Packet::ICMP_CODE_ECHO)){
      //we have an echo request packet for IPv4
      if(demux.ipv4_icmp_packet_isFree()){
    	demux.ipv4_icmp_setup(packet, len, interface);
    	
    	IPv4_Packet* reply_packet = demux.ipv4_icmp_reply_packet.get_IPv4_Packet();
    	ICMP_Packet* reply_icmp = demux.ipv4_icmp_reply_packet.get_ICMP_Packet();
    	
    	reply_icmp->set_type(ICMP_Packet::ICMP_TYPE_ECHO_REPLY);
    	reply_icmp->set_code(0);
    	reply_icmp->set_quench(icmp_packet->get_quench());
    	
    	unsigned datalen = packet->get_total_len() - packet->get_ihl()*4 - ICMP_Packet::ICMP_HEADER_SIZE;
    	if(datalen > ICMP_Packet::ICMP_MAX_DATA_SIZE) { datalen = ICMP_Packet::ICMP_MAX_DATA_SIZE; }
    	memcpy(reply_icmp->get_data(), icmp_packet->get_data(), datalen);
    	
    	reply_packet->set_total_len(datalen + ICMP_Packet::ICMP_HEADER_SIZE + reply_packet->get_ihl()*4); 
    	reply_icmp->set_checksum(InternetChecksum::computePayloadChecksum(reply_packet, interface)); //TODO: Tx Offloading? [causes incorrect checksum!]
 		
 		demux.ipv4_icmp_send(packet, reply_packet->get_total_len(), interface);
	  }
    }
    else{
      tjp->proceed();
    }
  }
  
};

#endif // __IPv4_ICMP_ECHO_REPLY_AH__
