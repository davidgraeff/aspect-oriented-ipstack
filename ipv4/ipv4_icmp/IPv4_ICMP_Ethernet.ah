// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPV4_ICMP_ETHERNET_AH__
#define __IPV4_ICMP_ETHERNET_AH__

#include "../../router/Interface.h"
#include "../../Eth_Frame.h"
#include "util/types.h"
#include "../../demux/Demux.h"


using namespace ipstack;

aspect IPv4_ICMP_Ethernet {
  
  // *** Affect class: Demux
  advice execution("bool ipstack::Demux::ipv4_icmp_packet_isFree()") &&
         that(demux) :
         around(Demux& demux){
    //call hasBeenSent on ethernet devices with ethernet frame (instead of ipv4 packet)
    Interface* interface = demux.ipv4_icmp_reply_packet.interface;
    if( (interface != 0) && (interface->getType() == Interface::ETHERNET) ){
      Eth_Frame* eth_frame = (Eth_Frame*) ( ((UInt8*) demux.ipv4_icmp_reply_packet.get_IPv4_Packet()) - Eth_Frame::ETH_HEADER_SIZE);
      *tjp->result() = interface->hasBeenSent(eth_frame);
    }
    else{
      tjp->proceed();
    }
  }
  
  advice execution("void ipstack::Demux::ipv4_icmp_send(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) &&
         that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){
          
    if(interface->getType() == Interface::ETHERNET){
    	demux.ipv4_icmp_reply_packet.get_IPv4_Packet()->computeChecksum(); //software checksumming
	    //setup Ethernet header
	    Eth_Frame* eth_frame = (Eth_Frame*) ((UInt8*) demux.ipv4_icmp_reply_packet.get_IPv4_Packet() - Eth_Frame::ETH_HEADER_SIZE);
	    Eth_Frame* mac_addresses = (Eth_Frame*) ( ((UInt8*) packet) - Eth_Frame::ETH_HEADER_SIZE);
	    
	    eth_frame->set_dst_hwaddr(mac_addresses->get_src_hwaddr());
	    eth_frame->set_src_hwaddr(interface->getAddress()); //TODO: use senders dst_addr?
	    eth_frame->set_type(IPv4_Packet::ETH_TYPE_IPV4);
	    
	    interface->send(eth_frame, demux.ipv4_icmp_reply_packet.get_IPv4_Packet()->get_total_len() + Eth_Frame::ETH_HEADER_SIZE);
    }
    else{
      tjp->proceed();
    }
  }
  
};

#endif // __IPV4_ICMP_ETHERNET_AH__

