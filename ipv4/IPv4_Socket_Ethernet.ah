// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPV4_SOCKET_ETHERNET_AH__
#define __IPV4_SOCKET_ETHERNET_AH__

#include "../router/Interface.h"
#include "IPv4_Socket.h"
#include "../Eth_Frame.h"
#include "util/types.h"

using namespace ipstack;


aspect IPv4_Socket_Ethernet_Aspect {
    
  // *** Affect class: IPv4_Socket
  // call-advice ordering: always execute this aspect before 'IPv4_Socket_Ethernet_ARP_Aspect' !
  advice call ("void ipstack::Interface::send(const void*, unsigned)") : 
         order("IPv4_Socket_Ethernet_Aspect" , "IPv4_Socket_Ethernet_ARP_Aspect");
  
  advice call("void ipstack::Interface::send(const void*, unsigned)") &&
         within("ipstack::IPv4_Socket") &&
         args(frame, framesize) &&
         that(socket) && target(interface) :
         before(const void* frame, unsigned framesize, IPv4_Socket& socket, Interface& interface){

    if(interface.getType() == Interface::ETHERNET) {
      //we have an ethernet device
      Eth_Frame* eth_frame = (Eth_Frame*) (((UInt8*) frame) - Eth_Frame::ETH_HEADER_SIZE);
    
      eth_frame->set_type(IPv4_Packet::ETH_TYPE_IPV4);
      eth_frame->set_src_hwaddr(interface.getAddress());
      //dst_hwaddr is set by ARP
    
      //manipulate relevant arguments:
      *(tjp->arg<0>()) = eth_frame;
      *(tjp->arg<1>()) = framesize + Eth_Frame::ETH_HEADER_SIZE;
    }
  }
  
  advice call("bool ipstack::Interface::hasBeenSent(const void*)") &&
         within("ipstack::IPv4_Socket") &&
         args(frame) &&
         target(interface) :
         before(const void* frame, Interface& interface){

    if(interface.getType() == Interface::ETHERNET) {
      Eth_Frame* eth_frame = (Eth_Frame*) (((UInt8*) frame) - Eth_Frame::ETH_HEADER_SIZE);
      *(tjp->arg<0>()) = eth_frame;
    }
  }
  
  // *** Affect class: UDP_Socket, TCP_Socket
  advice execution("void ipstack::%_Socket::set_network_header_offset(unsigned)") : before(){
    //add ethernet header offset for allocating memory
    *(tjp->arg<0>()) += Eth_Frame::ETH_HEADER_SIZE;
  }
  
};

#endif // __IPV4_SOCKET_ETHERNET_AH__
