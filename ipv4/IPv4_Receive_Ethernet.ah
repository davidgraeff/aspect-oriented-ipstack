#ifndef __IPV4_RECEIVE_ETHERNET_AH__
#define __IPV4_RECEIVE_ETHERNET_AH__

#include "../Eth_Frame.h"
#include "IPv4.h"
#include "../demux/Demux.h"
#include "../router/Interface.h"

using namespace ipstack;

aspect IPv4_Ethernet_Receive {

  advice execution("void ipstack::Demux::demux(const void*, unsigned, ipstack::Interface*)") &&
         args(data, len, interface) && that(demux) :
         around(const void* data, unsigned len, Interface* interface, Demux& demux){
    
    if(interface->getType() == Interface::ETHERNET){
      
      //check for correct ethernet frame length
      if( (len < Eth_Frame::ETH_HEADER_SIZE) || (len > Eth_Frame::MAX_FRAME_SIZE) ){
        return; //length too small or too big
      }
      
      Eth_Frame* eth_frame = (Eth_Frame*) data;
    
      if(eth_frame->get_type() == ETH_TYPE_IPV4){
        //remove ethernet header
        IPv4_Packet* packet = (IPv4_Packet*) eth_frame->get_data();

        demux.ipv4_demux(packet, len - Eth_Frame::ETH_HEADER_SIZE, interface);
        return; //ipv4 packet over ethernet processed
      }
    }
    tjp->proceed(); //try another 'demux'-receive aspect
  }
  
};

#endif // __IPV4_RECEIVE_ETHERNET_AH__

