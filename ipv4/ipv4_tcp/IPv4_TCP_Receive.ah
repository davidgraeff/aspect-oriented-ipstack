#ifndef __IPV4_TCP_RECEIVE_AH__
#define __IPV4_TCP_RECEIVE_AH__

#include "../IPv4.h"
#include "../../tcp/TCP.h"
#include "Demux_IPv4_TCP_Slice.ah"
#include "../../demux/Demux.h"
#include "../../router/Interface.h"
#include "../InternetChecksum.h"

using namespace ipstack;

aspect IPv4_TCP_Receive {

  // *** Affect class: Demux
  advice "ipstack::Demux" : slice Demux_IPv4_TCP_Slice;
  
  advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) && that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){

    if(packet->get_protocol() == TCP_Segment::IPV4_TYPE_TCP){
      //we have a tcp packet
      if(len < (IPV4_MIN_HEADER_SIZE + TCP_Segment::TCP_MIN_HEADER_SIZE)){
        return; //len too small!
      }
      
      //verify tcp checksum
      if(InternetChecksum::valid(packet, interface) == false){
        return;
      }

      TCP_Segment* tcp_segment = (TCP_Segment*) packet->get_data();
      
      UInt16 tcp_segment_dport = tcp_segment->get_dport();
      UInt16 tcp_segment_sport = tcp_segment->get_sport();
      
      //TODO: one-behind cache? -> header prediction?
      
      IPv4_TCP_Socket* socket = demux.ipv4_tcp_head_socket;
      while(socket != 0){
        if(socket->get_sport() == tcp_segment_dport){
          if(socket->get_dport() == tcp_segment_sport){
            if(socket->get_dst_ipv4_addr() == packet->get_src_ipaddr()){
              if(socket->get_src_ipv4_addr() == packet->get_dst_ipaddr()){
                //fully qualified socket found.
                socket->put(packet, len);
                return;
              }
            }
          }
        }
        else{
          socket = socket->getNext(); //try next socket
        }
      }
    }
    tjp->proceed(); //try another 'ipv4_demux'-aspect
  }
  
  // *** Affect class: IPv4_TCP_Socket
  advice execution("bool ipstack::IPv4_TCP_Socket::bind()") &&
         that(socket) : around(IPv4_TCP_Socket& socket){
    // delegation to 'Demux'
    *tjp->result() = Demux::Inst().bind(&socket);
  }

  advice execution("void ipstack::IPv4_TCP_Socket::unbind()") &&
         that(socket) : around(IPv4_TCP_Socket& socket){
    // delegation to 'Demux'
    Demux::Inst().unbind(&socket);
  }

};

#endif //__IPV4_TCP_RECEIVE_AH__

