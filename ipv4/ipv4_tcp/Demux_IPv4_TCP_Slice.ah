#ifndef __DEMUX_IPV4_TCP_SLICE__
#define __DEMUX_IPV4_TCP_SLICE__

#include "../IPv4.h"
#include "util/types.h"
#include "IPv4_TCP_Socket.h"

using namespace ipstack;


slice class Demux_IPv4_TCP_Slice {
  private:
  UInt16 ipv4_tcp_last_default_port;
  IPv4_TCP_Socket* ipv4_tcp_head_socket;
  
  public:
  bool bind(IPv4_TCP_Socket* socket){
    UInt16 sport = socket->get_sport();
    if(sport == TCP_Segment::UNUSED_PORT){
      //choose 'random' source port number
      socket->set_sport(ipv4_tcp_get_free_port());
    }
    else{
      //verify if connection is not used already
      IPv4_TCP_Socket* current = ipv4_tcp_head_socket;
      while(current != 0){
        if(current->get_sport() == sport){ //TODO: *really* necessary (all the checks)??
          if(current->get_dport() == socket->get_dport()){
            if(current->get_dst_ipv4_addr() == socket->get_dst_ipv4_addr()){
              if(current->get_src_ipv4_addr() == socket->get_src_ipv4_addr()){
                //error: sport, dport, dst_ipv4_addr, src_ipv4_addr already in use
                return false;
              }
            }
          }
        }
        current = current->getNext();
      }
    }
    //insert at front
    socket->setNext(ipv4_tcp_head_socket);
    ipv4_tcp_head_socket = socket;
    return true;
  }
  
  void unbind(IPv4_TCP_Socket* socket){
    if(socket == ipv4_tcp_head_socket){
      ipv4_tcp_head_socket = socket->getNext();
    }
    else{
      IPv4_TCP_Socket* current = ipv4_tcp_head_socket;
      IPv4_TCP_Socket* next = current->getNext();
      while(next != 0){
        if(next == socket){
          current->setNext(next->getNext());
          return;
        }
        current = next;
        next = current->getNext();
      }
    }
  }
  
  UInt16 ipv4_tcp_get_free_port(){
    //TODO: die TCP Variante unterscheidet sich von dem UDP-Code
    //Eine Verbindung ist ein 4er Tupel ... sport muss nicht
    //exklusiv sein!
    ipv4_tcp_last_default_port++;
    if(ipv4_tcp_last_default_port < 1024U){
      ipv4_tcp_last_default_port = 1024U;
    }
    IPv4_TCP_Socket* current = ipv4_tcp_head_socket;
    while(current != 0){
      if(current->get_sport() == ipv4_tcp_last_default_port){
        ipv4_tcp_last_default_port++;
        if(ipv4_tcp_last_default_port < 1024U){
          ipv4_tcp_last_default_port = 1024U;
        }
        current = ipv4_tcp_head_socket; //start once again
      }
      else{
        current = current->getNext();
      }
    }
    return ipv4_tcp_last_default_port;
  }

};

#endif /* __DEMUX_IPV4_TCP_SLICE__ */

