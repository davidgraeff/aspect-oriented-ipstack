#ifndef __IPV4_TCP_RESET_ETHERNET_AH__
#define __IPV4_TCP_RESET_ETHERNET_AH__

#include "../../router/Interface.h"
#include "../../Eth_Frame.h"
#include "util/types.h"
#include "../../demux/Demux.h"


using namespace ipstack;

aspect IPv4_TCP_Reset_Ethernet {
  
  // *** Affect class: Demux
  advice execution("bool ipstack::Demux::ipv4_tcp_rst_packet_isFree()") &&
         that(demux) :
         around(Demux& demux){
    //call hasBeenSent on ethernet devices with ethernet frame (instead of ipv4 packet)
    Interface* interface = demux.ipv4_tcp_rst_packet.interface;
    if( (interface != 0) && (interface->getType() == Interface::ETHERNET) ){
      Eth_Frame* eth_frame = (Eth_Frame*) ( ((UInt8*) demux.ipv4_tcp_rst_packet.get_IPv4_Packet()) - Eth_Frame::ETH_HEADER_SIZE);
      *tjp->result() = interface->hasBeenSent(eth_frame);
    }
    else{
      tjp->proceed();
    }
  }
  
  advice execution("void ipstack::Demux::ipv4_tcp_reset(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
         args(packet, len, interface) &&
         that(demux) :
         around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux){
          
    if(interface->getType() == Interface::ETHERNET){
      if(demux.ipv4_tcp_rst_packet_isFree()){
        demux.ipv4_tcp_reset_setup(packet, len, interface);
        
        //setup Ethernet header
        Eth_Frame* eth_frame = (Eth_Frame*) ((UInt8*) demux.ipv4_tcp_rst_packet.get_IPv4_Packet() - Eth_Frame::ETH_HEADER_SIZE);
        Eth_Frame* mac_addresses = (Eth_Frame*) ( ((UInt8*) packet) - Eth_Frame::ETH_HEADER_SIZE);
        
        eth_frame->set_dst_hwaddr(mac_addresses->get_src_hwaddr());
        eth_frame->set_src_hwaddr(interface->getAddress()); //TODO: use senders dst_addr?
        eth_frame->set_type(ETH_TYPE_IPV4);
        
        interface->send(eth_frame, TCP_Segment::TCP_MIN_HEADER_SIZE + IPV4_MIN_HEADER_SIZE + Eth_Frame::ETH_HEADER_SIZE);
      }
    }
    else{
      tjp->proceed();
    }
  }
  
};

#endif // __IPV4_TCP_RESET_ETHERNET_AH__

