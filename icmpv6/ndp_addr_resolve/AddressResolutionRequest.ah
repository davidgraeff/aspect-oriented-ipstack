// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012-2013 David GrÃ¤ff

#pragma once

#include "util/types.h"
#include "ipstack/icmpv6/ICMPv6.h"
#include "ipstack/icmpv6/ndp/NDPNeighborMessages.h"
#include "ipstack/icmpv6/ICMPv6_Socket.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/ipv6/ndpcache/NDPCacheEntry.h"
#include "ipstack/ipv6/AddressMemory.h"
#include "ipstack/ipv6/IPv6onSockets.h"
#include "ipstack/router/Interface.h"
#include "ipstack/demux/Demux.h"

aspect AddressResolutionRequest {
	/**
	 * If an entry is added to the ndp cache and its state is != Reachable send a neighbor_solicitation
	 * to the ip referred to by the entry
	 */
	advice execution("% ipstack::Interface::addNDPCacheEntry(...)") && result(entry) && that(interface) :
		after(NDPCacheEntry* entry, Interface& interface) {
		// If the interface is not up: we do not perform address resolution
		if (!interface.isIPv6Up())
			return;

		// If the entry is invalid or if the link layer address is already known do nothing
		if (!entry || entry->state == NDPCacheEntry::NDPCacheEntryState_Reachable)
			return;
		
		printf("AddressResolutionRequest by addNDPCacheEntry \n");
		
		ipstack::ipv6addr ipv6_srcaddr = {{0}};
		if (interface.getInterfaceIPv6AddressByScope(ipv6_srcaddr, IPV6AddressScope::IPV6_SCOPE_LINKLOCAL)) {

			ICMPv6_Socket &icmpv6instance = ICMPv6_Socket::instance();
			IPV6& ipv6 = icmpv6instance.ipv6;
			ipv6.set_dst_addr(entry->ipv6, &interface);
			// we use the multicast IP if the entry is "incomplete". If the entry is "stale" the link layer address
			// is already known and just has to be verified.
			if (entry->state != NDPCacheEntry::NDPCacheEntryState_Stale)
				solicitedNode_multicast_addr(entry->ipv6, (ipv6addr&)ipv6.get_dst_addr());
			ipv6.set_src_addr(ipv6_srcaddr);
			
			const UInt8 resSize = sizeof(NDPNeighborMessages::NeighborSolicitationMessage)+NDPMessages::multiple_of_octets(interface.getAddressSize())*8;

			Demux::Inst().setDirectResponse(true);
			SendBuffer* sbi = icmpv6instance.requestSendBuffer(&interface, resSize);
			if (sbi) {
				sbi->mark("AddressResolutionRequest");
				NDPNeighborMessages::NeighborSolicitationMessage* msg = (NDPNeighborMessages::NeighborSolicitationMessage*)sbi->getDataPointer();
				msg->type = (135);
				msg->code = (0);
				msg->reserved = 0;
				copy_ipv6_addr(entry->ipv6, msg->target_address);
				NDPMessages::write_option_linklayer_address(NDPMessages::SourceLinkLayer, (char*)msg->options, interface.getAddress(), interface.getAddressSize());
				sbi->writtenToDataPointer(resSize);
				icmpv6instance.send(sbi);
			}
		}
	}
};
