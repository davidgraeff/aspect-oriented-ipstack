// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "util/types.h"
#include "../ICMPv6.h"
#include "NDPMessages.h"
#include "../ICMPv6_Socket.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/ipv6/ndpcache/NDPCacheEntry.h"
#include "ipstack/ipv6/AddressMemory.h"
#include "ipstack/ipv6/IPv6onSockets.h"
#include "ipstack/router/Interface.h"
#include "ipstack/demux/Demux.h"

aspect NDP_Neigbor_Solicitation {
	// Answer other neighbor solicitations or update ndp cache entry with link-layer or remove tentative address (address duplicate detection)
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, icmp_packet, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, ICMPv6_Packet* icmp_packet, unsigned payloadlen, Interface* interface, Demux& demux) {
			
		NDPMessages::NeighborSolicitationMessage* message = (NDPMessages::NeighborSolicitationMessage*)icmp_packet;
		if (message->type == 135 && message->code == 0) {

			if (payloadlen < sizeof(NDPMessages::NeighborSolicitationMessage))
				return; // drop packet
			payloadlen -= sizeof(NDPMessages::NeighborSolicitationMessage);

			// Is this ndp Solicitation destinated to us?
			if (!interface->hasIPv6Address(message->target_address)) {
				return; // drop packet
			}
			
			// get dest mac
			char dest_ethernet_mac[6];
			const bool foundDestMac = NDPMessages::get_option_linklayer_address(NDPMessages::SourceLinkLayer,
				(char*)message->options, payloadlen, (char*)dest_ethernet_mac);

// 			printf("NDP_Neigbor_Solicitation received\n");
			
			// Look in the NDP Cache for an entry if the Neigbor_Solicitation was addressed to us (not unspecified/broadcasted)
			if (is_not_unspecified_ipv6_address(packet->get_src_ipaddr()) && foundDestMac) {
				NDPCacheEntry* entry = interface->ndpcache_find(message->target_address);
				if (!entry) { // we did not found an ipv6->ethernet entry
//  					printf("NDP_Neigbor_Solicitation: Add stale entry\n");
					// add ipv6->ethernet entry with state == Stale (we need a Neigbor_Solicitation msg to be send to the remote)
					entry = interface->addNDPCacheEntry(packet->get_src_ipaddr(), (UInt8*)dest_ethernet_mac, NDPCacheEntry::NDPCacheEntryState_Stale);
				}
			}

			// send advertisement as response. Flags: no router but a response
			const bool response = interface->hasIPv6Address(packet->get_dst_ipaddr());
			//printf("NDP_Neigbor_Solicitation send advertisement as response?: %u\n", response);
			if (response) {
				// if we do not have a link layer address -> use a multicast address
				if (!foundDestMac)
					solicitedNode_multicast_addr(message->target_address, message->target_address);
				NDPMessages::send_neighbor_advertisement(message->target_address, packet->get_src_ipaddr(), interface, response, false);
			}

		} else {
			tjp->proceed();
		}
	}

	/**
	 * If an entry is added to the ndp cache and its state is != Reachable send a neighbor_solicitation
	 * to the ip referred to by the entry
	 */
	advice execution("% ipstack::Interface::addNDPCacheEntry(...)") && result(entry) && that(interface) :
		after(NDPCacheEntry* entry, Interface& interface) {
		if (!entry || entry->state == NDPCacheEntry::NDPCacheEntryState_Reachable)
			return;
		ipstack::ipv6addr srcaddr = {{0}};
		if (interface.getInterfaceIPv6AddressByScope(srcaddr, IPV6AddressScope::IPV6_SCOPE_LINKLOCAL)) {
			// if we do not have a link layer address -> use a multicast address
			const bool useMulticast = true; // entry->state == NDPCacheEntry::NDPCacheEntryState_Incomplete;
			NDPMessages::send_neighbor_solicitation(srcaddr, entry->ipv6, &interface, useMulticast);
		}
	}

	/**
	 * Overwrite the behaviour if a non-router entry of the ndp cache is going to expire.
	 * We do not allow the default behaviour here. We send a Neighbor Solicitation message if
	 * a ndp cache entry for an entry (non router) is going to expire. The Neighbor Advertisement message
	 * will refresh the ndp cache entry.
	 */
	advice execution("% ipstack::Interface::ipv6_nonrouter_entry_refresh(...)") && args(entry) && that(interface) :
		around(NDPCacheEntry* entry, Interface& interface) {
		ipstack::ipv6addr srcaddr = {{0}};
		if (interface.getInterfaceIPv6AddressByScope(srcaddr, IPV6AddressScope::IPV6_SCOPE_LINKLOCAL))
			NDPMessages::send_neighbor_solicitation(srcaddr, entry->ipv6, &interface, false);
	}

	/**
	 * Address duplicate detection. After assigning an IP to an interface with the temporary state,
	 * do an address duplicate detection: Send out a Neighbor solicitation message with the unspecified ip (::)
	 * as src to the soliciated multicast address of our assigned ip. Use the assigned ip as "target_address" 
	 * parameter in the neighbor_solicitation message. If we get a response, the address is in use already and we have
	 * to select another ip.
	 */
	advice execution("% ipstack::Interface::setIPv6AddressState(...)") && args(entry, ipstate) && that(interface) :
		before(AddressEntry* entry, UInt8 ipstate, Interface& interface) {

		if (ipstate == AddressEntry::AddressEntryStateTemporary) {
			ipstack::ipv6addr srcaddr = {{0}};
			NDPMessages::send_neighbor_solicitation(srcaddr, entry->ipv6, &interface, true);
		}
	}
};
