// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "ipstack/demux/Demux.h"
#include "ipstack/router/Interface.h"
#include "ICMPv6.h"
#include "ICMPv6_Socket.h"

using namespace ipstack;

/**
  * Header option unknown: Send icmp error message
  */
aspect IPv6_ICMP_Option_Unknown {
	struct ICMPv6Unrechable {
		UInt8 type;
		UInt8 code;
		UInt16 checksum;
		UInt32 failure_pointer;
		UInt8 original_packet[];
	} __attribute__((packed));
	
	advice execution("void ipstack::Demux::error_option_unknown_v6(ipstack::IPv6_Packet*, ipstack::Interface*)") &&
	args(packet, interface) && that(demux) :
	around(IPv6_Packet* packet, Interface* interface, Demux& demux) {
		
		ICMPv6_Socket &icmpv6instance = ICMPv6_Socket::instance();
		icmpv6instance.ipv6.set_dst_addr(packet->get_src_ipaddr(), interface);
		icmpv6instance.ipv6.set_src_addr(packet->get_dst_ipaddr());
		
		demux.setDirectResponse(true);
		SendBuffer* sbi = icmpv6instance.requestSendBuffer(interface, ICMPv6_Packet::ICMP_MAX_DATA_SIZE);
		if (sbi) {
			sbi->mark("IPv6_ICMP_Option_Unknown");
			ICMPv6Unrechable* reply = (ICMPv6Unrechable*)sbi->getDataPointer();

			reply->type = (ICMPv6_Packet::ICMP_TYPE_PARAMETER_PROBLEM);
			reply->code = (ICMPv6_Packet::ICMP_CODE_PARAMETER_PROBLEM_UNKNOWN_OPTION);
			reply->failure_pointer = 0; // todo: set to 0, should point to the option
			
			sbi->writtenToDataPointer(sizeof(ICMPv6Unrechable));

			// ICMPv6 RFC: Append at least the errornous ipv6 packet + 8 byte payload to the responding icmp packet
			sbi->write(packet, ICMPv6_Packet::ICMP_MAX_DATA_SIZE-sizeof(ICMPv6Unrechable));

			icmpv6instance.send(sbi);
		}
	}
};
