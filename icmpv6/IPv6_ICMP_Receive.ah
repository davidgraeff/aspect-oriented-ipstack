// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "ICMPv6.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/ipv6/InternetChecksum.h"
#include "ipstack/demux/Demux.h"
#include "ipstack/router/Interface.h"
#include "Demux_IPv6_ICMP_Slice.ah"
#include "ipstack/icmpv6/ICMPv6_Socket.h"

using namespace ipstack;

aspect IPv6_ICMP_Receive {
	// *** Affect class: Demux
advice "ipstack::Demux" :
	slice Demux_IPv6_ICMP_Slice;
	/**
	  * In contrast to all other managment functionality an ICMPv6 incoming packet may generate
	  * multiple output packets. To have a deterministic order of processing we delay all
	  * send() calls until the packet has been processed and send all delayed packets in a burst.
	  * The mHoldBack variable will be set before processing a packet and will be reseted after that.
	  */
	unsigned mHoldBack;

	advice construction("ipstack::Demux") &&
	that(demux) : after(Demux& demux) {
		mHoldBack = 0;
	}
	
	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") &&
	args(interface, packet, payload, payload_length, nextHeader) && that(demux) :
		around(Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader, Demux& demux) {

		if (nextHeader != ICMPv6_Packet::IPV6_TYPE_ICMP) {
			*(tjp->result()) = false;
			tjp->proceed();
			return;
		}

		*(tjp->result()) = true; // end of ipv6 packet parsing
		
		//we have an icmp packet
		if (payload_length < ICMPv6_Packet::ICMP_HEADER_SIZE) {
			return; //len too small! Drop packet
		}

		if (InternetChecksumV6::valid(packet, payload_length, interface, ICMPv6_Packet::IPV6_TYPE_ICMP, (ICMPv6_Packet*)payload) == false) {
			//printf("icmpv6 checksum wrong!\n");
			return;
		}

		// activate hold back mode
		++mHoldBack;
		demux.icmpv6_demux(packet, (ICMPv6_Packet*)payload, payload_length, interface);
		// This method is reantrant safe, do not set mHoldBack directly to 0 (disable hold back mode), but decrease the variable instead
		--mHoldBack;
		
		/**
		 * Initiate the sending for all SendBufferWithInterface objects that haven't been send so far.
		 */
		ICMPv6_Socket &icmpv6instance = ICMPv6_Socket::instance();
		for (UInt16Opt i = 0; i < icmpv6instance.getSlots(); ++i) {
			SendBufferWithInterface* buffer = (SendBufferWithInterface*)icmpv6instance.packetbuffer->get();
			if (!buffer)
				break;
			if (buffer->sendbuffer.isValid()) {
				// not send
// 				printf("  IPv6_ICMP_Receive::send now %p\n", &(buffer->sendbuffer));
				icmpv6instance.send(&(buffer->sendbuffer), buffer->interface);
			}
			icmpv6instance.packetbuffer->put(buffer);
		}
		return; //ipv6 packet dispatched now
	}

	/**
	  * We intercept send requests and if mHoldBack is active we just do nothing. The affected sendbuffers will
	  * be send at the end of the "ipv6_payload_demux"-advice of this aspect.
	  */
	advice execution("void ipstack::ICMPv6_Socket::send(ipstack::SendBuffer*, ipstack::Interface*)")  : around(){
		if (mHoldBack) {
// 			printf("IPv6_ICMP_Receive::avoid %p\n", *tjp->arg<0>());
			return;
		}
		tjp->proceed();
	}
};
