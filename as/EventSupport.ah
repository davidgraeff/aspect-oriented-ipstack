// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPSTACK_EVENT_SUPPORT_AH__
#define __IPSTACK_EVENT_SUPPORT_AH__

#include "as/autosar_types.h"
#include "as/AS.h"
#include "os/krn/EnterLeave.h"

#include "EventSupport.h"
#include "EventSupport_Slice.ah"
#include "../ReceiveBuffer.h"

using namespace ipstack;

aspect Ipstack_EventSupport {
advice "ipstack::%_Socket" :
	slice EventSupport_Slice;

	advice construction("ipstack::%_Socket") : before() {
		AS::GetTaskID(tjp->that()->taskid); //init taskid
		//needs not to be synchronized -> changes no kernel data
	}

	advice execution("bool ipstack::%_Socket::addToReceiveQueue(...)") && result(success) :
		after(bool success) {

		if (success) {
			AS::SetEvent(tjp->that()->taskid, IPStackReceiveEvent_);
		}
	}

	advice execution("void ipstack::%_Socket::block()") : around() {
		//Because this is an aspect, AS:: calls are not synchronized!
		//EnterLeave_Weaving_Static.ah uses the call advice,
		//which doesn't match here :-(
		//Workaround: call enterKernel() and leaveKernel() explicit!

		os::krn::enterKernel(); //lock
		AS::WaitEvent(IPStackReceiveEvent_);
		AS::ClearEvent(IPStackReceiveEvent_);
		os::krn::leaveKernel(); //unlock
	}

};

#endif // __IPSTACK_EVENT_SUPPORT_AH__

