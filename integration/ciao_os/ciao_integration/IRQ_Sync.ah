// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IRQ_SYNC_AH__
#define __IRQ_SYNC_AH__

#include "os/krn/EnterLeave.h"

aspect IRQ_Sync{

  advice execution("void ipstack::ARP_Cache::ipv4_wait(%)") : around() {
    os::krn::leaveKernel(); //(re-)enable IRQs for incoming packets
    tjp->proceed();
    os::krn::enterKernel(); //disable IRQs again
  }
  
  //advice ordering: execute IRQ_Sync at first!
  advice execution ("void ipstack::Interface::send(const void*, unsigned)") : 
         order("IRQ_Sync" , "%" && !"IRQ_Sync");
  
  // Interface::send must be guarded, because the kernel sends arp/icmp packets,
  // and the user sends arbitrary packets, too. This has to be an execution advice to also
  // match all send calls in aspects.
  advice execution("void ipstack::Interface::send(const void*, unsigned)")  : around(){
    os::krn::enterKernel();
    tjp->proceed();
    os::krn::leaveKernel();
  }
  
  //Mempools must be synchronized:
  pointcut toSync() = "% ipstack::%_Socket::requestSendBuffer(...)" ||
					  "% ipstack::SharedMemory::%(%)" ||
					  "% ipstack::DemuxLinkedList::%(%)" ||
                      "% ipstack::%_Socket::free(%)" ||
                      "% ipstack::%_Socket::%bind()" || //sync linked-list operations
                      "% ipstack::%_Socket::_listen()" || //sync linked-list operations
                      "% ipstack::%_Socket::deaf()";  //sync linked-list operations

  advice execution(toSync()) : around() {
    os::krn::enterKernel();
    tjp->proceed();
    os::krn::leaveKernel();
  }
    
};

#endif // __IRQ_SYNC_AH__

