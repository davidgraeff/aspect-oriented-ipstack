// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert, 2013 David GrÃ¤ff

#pragma once

#include "tapInterface.h"

using namespace ipstack;

aspect Interface_Delegation_Aspect {
	//delegation 
	typedef TapInterface Derived;
	
	advice execution("const char* ipstack::Interface::getName()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->getName();
	}
	
	advice execution("unsigned char ipstack::Interface::getType()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->getType();
	}
	
	advice execution("const unsigned char* ipstack::Interface::getAddress()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->getAddress();
	}
	
	advice execution("unsigned ipstack::Interface::getMTU()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->getMTU();
	}
	
	advice execution("% ipstack::Interface::getAddressSize()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->getAddressSize();
	}
	
	advice execution("bool ipstack::Interface::hasTransmitterHardwareChecksumming()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->hasTransmitterHardwareChecksumming();
	}
	
	advice execution("bool ipstack::Interface::hasReceiverHardwareChecksumming()") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->hasReceiverHardwareChecksumming();
	}
	
	advice execution("void ipstack::Interface::send(const void*, unsigned)") : around() {
		static_cast<Derived*>(tjp->that())->send(*tjp->arg<0>(), *tjp->arg<1>());
	}

	advice execution("void ipstack::Interface::send(const void*, unsigned, bool, unsigned)") : around() {
		static_cast<Derived*>(tjp->that())->send(*tjp->arg<0>(), *tjp->arg<1>(), *tjp->arg<2>(), *tjp->arg<3>());
	}
	
	advice execution("bool ipstack::Interface::hasBeenSent(const void*)") : around() {
		*tjp->result() = static_cast<Derived*>(tjp->that())->hasBeenSent(*tjp->arg<0>());
	}
};
