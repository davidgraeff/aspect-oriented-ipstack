// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "../router/Interface.h"
#include "UDP.h"
#include "UDP_Socket.h"
#include "ipstack/SendBuffer.h"
#include "util/types.h"

using namespace ipstack;

/**
 * Adds the UDP header to a SendBuffer
 */
aspect Sendbuffer_UDP  {
	advice execution("% ipstack::%UDP_Socket::estimateSendBufferMinSize()") && result(v) :
		after(UInt16 v) {
			*tjp->result() = v + UDP_Packet::UDP_HEADER_SIZE;
	}

	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv%" , "Sendbuffer_UDP");
	
	advice execution("% ipstack::%UDP_Socket::prepareSendBuffer(...)") && args(sendbuffer) :
		after(SendBuffer* sendbuffer) {
		// remainingpayloadsize: this is payload AND the udp header size as determined in 
		// estimateSendBufferMinSize() before.
		
		sendbuffer->memstart_transport = sendbuffer->getDataPointer();
		// set ip next header protocol to UDP
		*(sendbuffer->nextheaderfield_ip) = UDP_Packet::IP_TYPE_UDP;
	}
	
	advice execution("% ipstack::UDP_Socket::prepareSendBuffer(...)") && args(sendbuffer) :
		after(SendBuffer* sendbuffer) {
		tjp->that()->setupHeader((UDP_Packet*)sendbuffer->getDataPointer(), sendbuffer->getRemainingSize());
		sendbuffer->writtenToDataPointer(UDP_Packet::UDP_HEADER_SIZE);
	}
};
