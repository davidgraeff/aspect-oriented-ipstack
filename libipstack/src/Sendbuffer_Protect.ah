// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2013 David GrÃ¤ff
#pragma once
#include "util/types.h"
#include "ipstack/as/SystemHalt.h"
#include "stdio.h"
#include "ipstack/SendBuffer.h"
#include "ipstack/router/Router.h"
#include "ipstack/Sendbuffer_Protect_Slice.ah"
using namespace ipstack;

/**
  * This advice adds additional protection to sendbuffers and observe
  * write usage behaviour. For performance reasons the wrong usage of
  * a sendbuffer is not ruled out beforehand. You are able to
  * write beyond the buffers size with "writtenToDataPointer", the
  * "write" method silently fails if there is not enough space reserved
  * and you are able to write to an already invalidated buffer.
  *
  * If you activate this aspect you will gain a simple protection against buffer
  * overflow and you will be notified if writing to a sendbuffer fails.
  * You are enforced to use the methods in the correct order (e.g.
  * first getDataPointer() than writtenToDataPointer() ) and to fill the buffer
  * entirely [otherwise we would create an invalid IP packet: length is wrong].
  * 
  * Additionally this aspect protects you from using invalid Interface* pointer
  * for sending.
  * 
  * This aspect also serves as a simple unit test for the sendbuffer class.
  */
aspect sendbuffer_protect {
	SendBuffer* lastbuffer;
	UInt8* checkbyte;
	
	/* Affect class: SendBuffer */
	advice "ipstack::SendBuffer" : slice SendBuffer_Protect_Slice;
	
	advice execution( "void os::init()" ) : after() {
		printf("SendBuffer protection: on\n");
	}
	
	/**
	  * Warning message if allocation fails
	  */
	advice execution( "% ipstack::SendBuffer::createInstance(...)" ) : after() {
		if (*tjp->result() == 0) {
			printf("SendBuffer: Allocation failed!\n");
		} else {
			(*tjp->result())->hasBeenTransmitted = false;
		}
	}

	advice execution("% ipstack::SendBuffer::hasBeenSent(...)") && that(sendbuffer) : after(SendBuffer& sendbuffer) {
		if (sendbuffer.hasBeenTransmitted == false) {
			printf("SendBuffer: You have to transmit the buffer to the NIC before calling hasBeenSent!\n");
			System::haltsystem();
		}
	}
	
	advice execution("% ipstack::SendBuffer::getDataPointer()") && that(sendbuffer) : after(SendBuffer& sendbuffer) {
		// store pointer to the sendbuffer. we will compare that in writtenToDataPointer.
		lastbuffer = &sendbuffer;
		// store the byte directly after the sendbuffer. If this changed we have a buffer overrun
		checkbyte = (UInt8*)(sendbuffer.getDataStart()) + sendbuffer.getSize() + 1;
	}
	
	advice execution("% ipstack::SendBuffer::writtenToDataPointer(%)") && args(length) && that(sendbuffer) :
		around(UInt16Opt length, SendBuffer& sendbuffer) {
			
		if (lastbuffer != &sendbuffer) {
			printf("SendBuffer::writtenToDataPointer: getDataPointer() have to be called before writtenToDataPointer()!\n");
			System::haltsystem();
		}
		if (sendbuffer.getStateWithoutOptions()!=SendBuffer::WritingState) {
			printf("SendBuffer::writtenToDataPointer: buffer is not in writing state anymore!\n");
			sendbuffer.printAdditionalInfo();
			System::haltsystem();
		}
		UInt16Opt availsize = sendbuffer.getRemainingSize();
		if (length>availsize) {
			printf("SendBuffer::writtenToDataPointer: length too big. Requested: %u, Available: %u!\n", length, availsize);
			sendbuffer.printAdditionalInfo();
			System::haltsystem();
		}
		tjp->proceed();
		UInt8* cbyte = (UInt8*)(sendbuffer.getDataStart()) + sendbuffer.getSize() + 1;
		if (*checkbyte != *cbyte) {
			printf("SendBuffer::writtenToDataPointer: buffer overrun (%u)!=(%u)!\n", *checkbyte, *cbyte);
			sendbuffer.printAdditionalInfo();
			System::haltsystem();
		}
		if (sendbuffer.getRemainingSize()!=availsize-length) {
			printf("SendBuffer::writtenToDataPointer: before (%u)!=after (%u)!\n", sendbuffer.getRemainingSize(),availsize-length);
			System::haltsystem();
		}
	}
	
	advice execution("% ipstack::SendBuffer::write(%,%)") && args(newdata, length) && that(sendbuffer) :
		around(const void* newdata, UInt16Opt length, SendBuffer& sendbuffer) {
			
		// reset getDataPointer() -> writtenToDataPointer() sendbuffer pointer
		// This is usually not wanted to first call getDataPointer() after that write() and than writtenToDataPointer()
		// and should therefore fail
		lastbuffer = 0;
			
		if (newdata==0) {
			printf("SendBuffer::write: invalid source buffer %u!\n", length);
			System::haltsystem();
		}
		if (sendbuffer.getStateWithoutOptions()!=SendBuffer::WritingState) {
			printf("SendBuffer::write: buffer is not in writing state anymore!\n");
			sendbuffer.printAdditionalInfo();
			System::haltsystem();
		}
		UInt16Opt availsize = sendbuffer.getRemainingSize();
		if (length>availsize) {
			printf("SendBuffer::write: length too big. Requested: %u, Available: %u!\n", length, availsize);
			sendbuffer.printAdditionalInfo();
			System::haltsystem();
		}
		tjp->proceed();
		if (sendbuffer.getRemainingSize()!=availsize-length) {
			printf("SendBuffer::write: before (%u)!=after (%u)!\n", sendbuffer.getRemainingSize(),availsize-length);
			sendbuffer.printAdditionalInfo();
			System::haltsystem();
		}
	}

	advice execution("% ipstack::%_Socket::send(...)") && args(dataToSend) :
		around(SendBuffer* dataToSend) {

		if (dataToSend->getStateWithoutOptions()==SendBuffer::TransmittedState) {
			printf("SendBuffer: send failed. Buffer already transmitted %p!\n", dataToSend);
			dataToSend->printAdditionalInfo();
			System::haltsystem();
		} else
		if (dataToSend->getStateWithoutOptions()==SendBuffer::InvalidState) {
			printf("SendBuffer: send failed. Buffer invalid %p!\n", dataToSend);
			System::haltsystem();
		}

		if (!dataToSend->getInterface()) {
			printf("SendBuffer: send failed. No interface provided!\n");
			System::haltsystem();
		}
		
		Interface* interface = dataToSend->getInterface();
		
		// check if the interface pointer is valid
		Router& router = Router::Inst();
		Interface* rInterface = router.get_interface(0);
		bool found = false;
		while (rInterface) {
			if (interface == rInterface) {
				found = true;
				break;
			}
			rInterface = rInterface->getNext();
		}
		if (!found) {
			printf("SendBuffer: send failed. Interface pointer invalid %p!\n", interface);
			System::haltsystem();
		}
		
		// check if all tcp/ip layers put their content into the buffer: we check the next header fields for known values
		UInt8* lastByte = (UInt8*)(dataToSend->getDataStart()) + dataToSend->getSize();
		
		if (dataToSend->memstart_ethernet>=dataToSend->getDataStart() && dataToSend->memstart_ethernet<=lastByte) {
			//Eth_Frame* dest_eth_frame = (Eth_Frame*)(dataToSend->memstart_ethernet);
		} else {
			printf("SendBuffer: send failed. Ethernet layer is missing %p!\n", dataToSend->memstart_ethernet);
			System::haltsystem();
		}
		if (dataToSend->memstart_ip>=dataToSend->getDataStart() && dataToSend->memstart_ip<=lastByte) {
			
		} else {
			printf("SendBuffer: send failed. IP layer is missing %p!\n", dataToSend->memstart_ip);
			System::haltsystem();
		}
		if (dataToSend->memstart_transport>=dataToSend->getDataStart() && dataToSend->memstart_transport<=lastByte) {
			
		} else {
			printf("SendBuffer: send failed. Transport layer is missing %p!\n", dataToSend->memstart_transport);
			System::haltsystem();
		}
		
		// check size: all bytes written to the end or unused requested space? if unused space: print out the sizes of all layers.
		//  if one size is 0 or has a strange value
		// -> Pointcut of an aspect is wrong.
		if (dataToSend->getRemainingSize()) {
			printf("SendBuffer: send failed. Buffer not filled to the end. Unused: %u!\n", dataToSend->getRemainingSize());
			dataToSend->printAdditionalInfo();
			System::haltsystem();
		}
		
		lastbuffer = 0;
		
		tjp->proceed();
		
		if (dataToSend->getStateWithoutOptions()!=SendBuffer::TransmittedState) {
			printf("SendBuffer: should be in TransmittedState after sending %p!\n", dataToSend);
			System::haltsystem();
		}
		
		dataToSend->hasBeenTransmitted = true;
	}
};
