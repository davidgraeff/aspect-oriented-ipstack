// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2012 David GrÃ¤ff

#pragma once
#include "IPv6_Singlestack_Slice.ah"
#include "ipv6/IPv6onSockets.h"
#include "ipv6/IPv6_Packet.h"
#include "ipv6/IPv6AddressUtilities.h"
#include "ipv6/InternetChecksum.h"

using namespace ipstack;

aspect IPv6_Singlestack_Socket_aspect {
	advice "ipstack::IP" : slice IPv6_Singlestack_Slice;
	
	advice execution("ipstack::Interface* ipstack::IP::getUsedInterface()") : around() {
		*(tjp->result()) = tjp->that()->ipv6.interface;
	}
	
	advice execution("bool ipstack::IP::hasValidSrcDestAddresses()") : around() {
		*(tjp->result()) = tjp->that()->ipv6.hasValidSrcDestAddresses();
	}
	
	advice execution("void ipstack::IP::set_dst_ip_addr_to_peer_addr(char*)") && args(ip_packet)
		: around(char* ip_packet) {
		tjp->that()->ipv6.set_dst_addr(((IPv6_Packet*)ip_packet)->get_src_ipaddr());
	}

	advice execution("bool ipstack::IP::is_ip_peer_addr_matching(char*)") && args(ip_packet) : around(char* ip_packet) {
		*(tjp->result()) = compare_ipv6_addr(tjp->that()->ipv6.get_dst_addr(),((IPv6_Packet*)ip_packet)->get_src_ipaddr());
	}
	
	advice execution("bool ipstack::IP::is_ip_src_addr_matching(ipstack::IP&)") && args(ip) : around(IP& ip) {
		*(tjp->result()) = compare_ipv6_addr(tjp->that()->ipv6.get_src_addr(),ip.ipv6.get_src_addr());
	}
	
	advice execution("% ipstack::InternetChecksum::computePseudoHeader(...)") &&
		args(ip_packet, payloadlen, upper_layer_nextheader) : around(char* ip_packet, uint16_t payloadlen, uint8_t upper_layer_nextheader) {
		*(tjp->result()) = InternetChecksumV6::computePseudoHeader(ip_packet, payloadlen, upper_layer_nextheader);
	}
};

