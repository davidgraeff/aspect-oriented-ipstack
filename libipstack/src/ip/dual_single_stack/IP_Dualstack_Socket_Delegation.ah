// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "IP_Dualstack_Slice.ah"
#include "IP_Dualstack_IPVx_Slice.ah"
#include "ip/IP.h"
#include "ipv4/IPv4onSockets.h"
#include "ipv4/InternetChecksum.h"
#include "ipv6/IPv6.h"
#include "ipv6/InternetChecksum.h"

/**
 * If both IPv4 and IPv6 are configured, selecting
 * the sending protocol is a runtime decision.
 * The current implementation intercepts setting the
 * destination address for ipv4 and ipv6 and use the ip version where
 * this is done for the last time.
 */
aspect IP_Dualstack_Socket_Delegation {
	/**
	  * The IPv4 and IPv6 ip-layer classes have to change the to-be-used ip
	  * version and therefore need a pointer to the m_useipversion variable of
	  * the socket. 
	  */
	advice construction("ipstack::IP") && that(ip) : after(IP& ip) {
		ip.m_useipversion = 4; // initial version is IPv4
		ip.ipv4.m_useipversionPtr = &ip.m_useipversion;
		ip.ipv6.m_useipversionPtr = &ip.m_useipversion;
	}
	
	/**
	 * SET IP VERSION WHILE SETTING UP A DESTINATION ADDRESS
	 */
	advice execution("% ipstack::IPV4::set_dst_addr(...)") : after() {
		*(tjp->that()->m_useipversionPtr) = 4;
	}
	advice execution("% ipstack::IPV6::set_dst_addr(...)") : after() {
		*(tjp->that()->m_useipversionPtr) = 6;
	}
	
	/**
	 * SET IP VERSION IF WE INTEND TO SEND A RESPONSE
	 */
	// we have to set the ip version, before IP-related aspects try to add any IP header
	advice execution("void ipstack::SendbufferIP::prepareSendBuffer(...)") : order("IP_Dualstack_Socket_Delegation", "Sendbuffer_IPv%");
	advice execution("void ipstack::SendbufferIP::prepareSendBuffer(...)") && args(sendbuffer, ip, use_as_response) :
		around(SendBuffer* sendbuffer, IP& ip, ReceiveBuffer* use_as_response) {
			if (use_as_response) {
				ip.m_useipversion = IP::get_ip_version(use_as_response->p.ip_packet);
			}
			tjp->proceed();
	}
	
	/**
	 * SENDING
	 */
	advice execution("ipstack::Interface* ipstack::IP::getUsedInterface()") && that(ip) : around(IP& ip) {
		if (ip.m_useipversion == 4)
			*tjp->result() = ip.ipv4.interface;
		else
			*tjp->result() = ip.ipv6.interface;
	}
	
	advice execution("bool ipstack::IP::hasValidSrcDestAddresses()") && that(ip) : around(IP& ip) {
		if (ip.m_useipversion == 4)
			*tjp->result() = ip.ipv4.hasValidSrcDestAddresses();
		else
			*tjp->result() = ip.ipv6.hasValidSrcDestAddresses();
	}
	
	advice execution("void ipstack::IP::set_dst_ip_addr_to_peer_addr(char*)") && that(ip) && args(ip_packetip)
		: around(IP& ip, char* ip_packet) {
		if (ip.m_useipversion == 4)
			ip.ipv4.set_dst_addr(((IPv4_Packet*)ip_packet)->get_src_ipaddr());
		else
			ip.ipv6.set_dst_addr(((IPv6_Packet*)ip_packet)->get_src_ipaddr());
	}

	advice execution("bool ipstack::IP::is_ip_peer_addr_matching(char*)") && that(ip) && args(ip_packetip)
		: around(IP& ip, char* ip_packet) {
		if (ip.m_useipversion == 4)
			*(tjp->result()) = (ip.ipv4.get_dst_addr()==((IPv4_Packet*)ip_packet)->get_src_ipaddr());
		else
			*(tjp->result()) = compare_ipv6_addr(ip.ipv6.get_dst_addr(),((IPv6_Packet*)ip_packet)->get_src_ipaddr());
	}
	
	advice execution("bool ipstack::IP::is_ip_src_addr_matching(ipstack::IP&)") && that(this_ip) && args(ip) : around(IP& this_ip, IP& ip) {
		if (this_ip.m_useipversion != ip.m_useipversion)
			*(tjp->result()) = false;
		else {
			if (this_ip.m_useipversion == 4)
				*(tjp->result()) = (this_ip.ipv4.get_dst_addr()==ip.ipv4.get_dst_addr());
			else
				*(tjp->result()) = compare_ipv6_addr(this_ip.ipv6.get_dst_addr(),ip.ipv6.get_dst_addr());
		}
	}
	
	advice execution("% ipstack::InternetChecksum::computePseudoHeader(...)") &&
		args(ip_packet, payloadlen, upper_layer_nextheader) : around(char* ip_packet, uint16_t payloadlen, uint8_t upper_layer_nextheader) {
			if (IP::get_ip_version(ip_packet) == 4)
				*(tjp->result()) = InternetChecksumV4::computePseudoHeader(ip_packet, payloadlen, upper_layer_nextheader);
			else
				*(tjp->result()) = InternetChecksumV6::computePseudoHeader(ip_packet, payloadlen, upper_layer_nextheader);
	}
};

