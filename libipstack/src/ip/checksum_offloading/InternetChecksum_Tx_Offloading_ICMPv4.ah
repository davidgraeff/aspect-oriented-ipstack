// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once
#include "router/Interface.h"
#include "router/sendbuffer/SendBuffer.h"

using namespace ipstack;

/**
* Hardware tx checksumming support for ICMPv4
* (commented out: e1000 does not reliably compute the checksum for whatever reason)
*/
aspect InternetChecksum_Tx_Offloading_icmpv4 {
// 	advice execution("% ipstack::ICMPv4_Socket::send(ipstack::SendBuffer*)")  &&
// 		args(dataToSend):
// 		around(SendBuffer* dataToSend) {
// 
// 		if (interface->hasTransmitterHardwareChecksumming()) {
// 			unsigned ip_header_size = ((char*)dataToSend->p.transport_packet - (char*)dataToSend->p.ip_packet);
// 			printout("icmp send with hardware checksum ip: %u, len: %u\n", ip_header_size, dataToSend->getSize());
// 			//call specialized send function for checksum offloading
// 			dataToSend()->getInterface()->send(dataToSend->getDataStart(), dataToSend->getSize(), false, ip_header_size);
// 			return; // we do not execute the usual send Method
// 		}
// 		tjp->proceed();
// 	}
// 	advice execution("% ipstack::ICMPv4_Packet::calc_checksum(%, %, ipstack::Interface*)") &&
// 	args(csum,payloadlen, interface) :
// 		around(uint32_t csum, uint16_t payloadlen, Interface* interface) {
// 
// 		if ((interface != 0) && (interface->hasTransmitterHardwareChecksumming())) {
// 			printout("icmp prepare hardware checksum: %u, len: %u\n", InternetChecksum::accumulateCarryBits(csum), payloadlen);
// 			*tjp->result() = InternetChecksum::accumulateCarryBits(csum); //computePayload is done by hardware
// 		} else {
// 			tjp->proceed();
// 		}
// 	}
};
