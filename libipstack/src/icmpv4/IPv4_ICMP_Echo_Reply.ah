// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "ipv4/IPv4_Packet.h"
#include "ipv4/InternetChecksum.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "icmpv4/ICMPv4_Packet.h"
#include "ICMPv4_DerivedSocket.h"

using namespace ipstack;


aspect IPv4_ICMP_Echo_Reply {
	advice execution("bool ipstack::ICMPv4_DerivedSocket::acceptedData(%,%)") &&
	args(type, code) : around(uint8_t type, uint8_t code) {
		if ((type == ICMPv4_Packet::ICMP_TYPE_ECHO_REQUEST) &&
			(code == ICMPv4_Packet::ICMP_CODE_ECHO)) {
			tjp->result() = true;
			return;
		}
		tjp->proceed();
	}
		
	advice execution("void ipstack::ICMPv4_DerivedSocket::handleIncomingPacket(ipstack::SmartReceiveBufferPtr&)") &&
	args(b) : around(SmartReceiveBufferPtr& b) {
		
		ICMPv4_Packet* icmp_packet = static_cast<ICMPv4_Packet*>(buffer->get_payload_data());
		if ((icmp_packet->get_type() == ICMPv4_Packet::ICMP_TYPE_ECHO_REQUEST) &&
			(icmp_packet->get_code() == ICMPv4_Packet::ICMP_CODE_ECHO)) {
			
			ICMPv4_DerivedSocket& socket = Management_Task::Inst().get_socket_icmpv4();
			uint16_t maxlen = socket.getMaxPayloadLength(b->get_interface());
			uint16_t payloadlen = b->get_payload_size();
			if (payloadlen < maxlen) {
				maxlen = payloadlen;
			}
			
			SendBuffer* sbi = socket.requestSendBuffer(buffer->get_interface(), maxlen, buffer->receivebuffer_pointer());
			//we have an echo request packet for IPv4
			if (sbi) {
				ICMPv4_Packet* reply_icmp = (ICMPv4_Packet*)sbi->getDataPointer();

				reply_icmp->set_type(ICMPv4_Packet::ICMP_TYPE_ECHO_REPLY);
				reply_icmp->set_code(0);
				reply_icmp->set_quench(icmp_packet->get_quench());
				sbi->writtenToDataPointer(ICMPv4_Packet::ICMP_HEADER_SIZE);
				// append original payload of the source icmp packet
				sbi->write(icmp_packet->get_data(), payloadlen-ICMPv4_Packet::ICMP_HEADER_SIZE);

				socket.send(sbi);
			}
		} else {
			tjp->proceed();
		}
	}
};
