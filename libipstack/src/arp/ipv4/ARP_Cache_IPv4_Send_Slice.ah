// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __ARP_CACHE_IPV4_SEND_SLICE__
#define __ARP_CACHE_IPV4_SEND_SLICE__

#include "util/ipstack_inttypes.h"
#include <string.h> //for memcpy
#include "router/Interface.h"
#include "../ARP.h"
#include "ethernet/Eth_Frame.h"
#include "Eth_ARP_IPv4_Packet.h"

#include "os_integration/Clock.h"

using namespace ipstack;


slice class ARP_Cache_IPv4_Send_Slice {
  public:
  //Configuration:
  enum { MAX_CACHE_ENTRIES = 5 };
  
  private:
  
  struct cache_entry {
    uint32_t ipv4_addr;
    uint8_t hw_addr[6];
  } entries[MAX_CACHE_ENTRIES];
  
  void ipv4_clear(){
    for(unsigned i=0; i<MAX_CACHE_ENTRIES; i++){      
      entries[i].ipv4_addr = 0;
    }
  }
  
  uint8_t* ipv4_find(uint32_t ipv4_addr);
  
  void ipv4_wait(uint32_t ipv4_addr){
    uint64_t timeout = Clock::now() + Clock::ms_to_ticks(1000U); //1 sec
    while( (Clock::now() < timeout) && (ipv4_find(ipv4_addr)==0) );
  }
  
  public:
  
  //Send a new ARP-Request packet
  void ipv4_request(uint32_t ipv4_addr, Interface* interface){
    Eth_ARP_IPv4_Packet* packet = getNextFreePacket();
    if(packet != 0){
       packet->interface = interface;

       //Ethernet type field
       packet->get_Eth_Frame()->set_type(ARP_Packet::ETH_TYPE_ARP);

       //ARP Header
       packet->get_ARP_Packet()->set_hw_type(ARP_Packet::ARP_HW_TYPE_ETH);
       packet->get_ARP_Packet()->set_protocol_type(ARP_Packet::ARP_PROTOCOL_TYPE_IPV4);
       packet->get_ARP_Packet()->set_hw_addr_size(ARP_Packet::ARP_HW_ADDR_SIZE_ETH);
       packet->get_ARP_Packet()->set_protocol_addr_size(ARP_Packet::ARP_PROTOCOL_ADDR_SIZE_IPV4);
       packet->get_ARP_Packet()->set_opcode(ARP_Packet::ARP_REQUEST);
       
       //Source HW-Addr for this ARP reply packet:
       const uint8_t* i_hw_addr = interface->getAddress();
       memcpy(packet->arp_src_hwaddr, i_hw_addr, 6);
       packet->get_Eth_Frame()->set_src_hwaddr(i_hw_addr);
       
       //Source IP-Addr
       packet->arp_src_ipv4_addr = interface->getIPv4Addr();
       
       //Destination HW-Addr
       memset(packet->arp_dst_hwaddr, 0xFF, 6); //Broadcast ethernet address
       packet->get_Eth_Frame()->set_dst_hwaddr_broadcast();
       
       //Destination IP-Addr
       packet->arp_dst_ipv4_addr = ipv4_addr;
       
       //Send the ARP reply packet
       interface->send(packet, Eth_ARP_IPv4_Packet::FRAMESIZE);
    }
  }

};

slice uint8_t* ARP_Cache_IPv4_Send_Slice::ipv4_find(uint32_t ipv4_addr){
  for(unsigned i=0; i<MAX_CACHE_ENTRIES; i++){      
    cache_entry& entry = entries[i];
    if(entry.ipv4_addr == ipv4_addr){
      return entry.hw_addr;
    }
  }
  return 0;
}

#endif /* __ARP_CACHE_IPV4_SEND_SLICE__ */
