// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __ARP_CACHE_IPV4_SEND_RECEIVE_SLICE__
#define __ARP_CACHE_IPV4_SEND_RECEIVE_SLICE__

#include "util/types.h"
#include "../../router/Interface.h"
#include "Eth_ARP_IPv4_Packet.h"

using namespace ipstack;


slice class ARP_Cache_IPv4_Send_Receive_Slice {
  public:
  //Configuration:
  enum { MAX_PACKETS = 1 }; // arp packets to be send concurrently
  
  private:
  
  Eth_ARP_IPv4_Packet packet_pool[MAX_PACKETS]; //the packet pool

  Eth_ARP_IPv4_Packet* getNextFreePacket();
  public:
  
  void ipv4_reply(const UInt8* src_hwaddr, const UInt32* src_ipv4_addr, Interface* interface){
    // Aspects to be weaved here!
    // handle incoming arp request: return an arp reply packet to the requesting host 
  }
  
  void ipv4_update(const UInt32* ipv4_addr, const UInt8* hw_addr){
    // Aspects to be weaved here!
    // handle incoming arp replies: update own cache
  }

};

slice Eth_ARP_IPv4_Packet* ARP_Cache_IPv4_Send_Receive_Slice::getNextFreePacket(){
  for(unsigned i=0; i<MAX_PACKETS; i++){
    Eth_ARP_IPv4_Packet& packet = packet_pool[i];
    if(packet.isFree()){
      return &packet;
    }
  }
  return 0;
}

#endif // __ARP_CACHE_IPV4_SEND_RECEIVE_SLICE__ 

