// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "arp/ARP_Cache.h"
#include "ethernet/Eth_Frame.h"
#include "ethernet/EthernetAddressUtilities.h"
#include "router/Router.h"
#include "sending/SendBuffer.h"

using namespace ipstack;

aspect IPv4_Socket_Ethernet_ARP_Aspect {
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv%", "IPv4_Socket_Ethernet_ARP_Aspect");
	
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") && args(sendbuffer) :
		around(SendBuffer* sendbuffer) {

		// check ip version
		if (tjp->that()->m_useipversion == 4 && (sendbuffer->getState() & SendBuffer::ResolveLinkLayerStateOption)) {
			IPv4_Packet* ip = (IPv4_Packet*)sendbuffer->memstart_ip;
			Eth_Frame* eth_frame = (Eth_Frame*)(sendbuffer->memstart_ethernet);
			Interface* interface = sendbuffer->getInterface();

			const uint8_t* dst_hw_addr = ARP_Cache::Inst().ipv4_lookup(ip->get_dst_ipaddr(), interface);
			if (dst_hw_addr == 0) {
				sendbuffer->setState(SendBuffer::InvalidState);
				return; //don't send this packet: destination MAC address unknown!
			}

			eth_frame->set_dst_hwaddr(dst_hw_addr);
			// Restore writing state after it has been changed by the IPv6 ethernet aspect
			sendbuffer->setState(SendBuffer::WritingState);
		}
		tjp->proceed();
	}
};
