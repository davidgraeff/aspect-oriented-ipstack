// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert

#pragma once

#include "router/Interface.h"
#include "ARP_Cache.h"
#include "ARP_Static_Slice.h"
#include "util/ipstack_inttypes.h"

using namespace ipstack;


aspect IPv4_ARP_Static {
  // *** Affect class: ARP_Cache
  advice "ipstack::ARP_Cache" : slice ARP_Cache_IPv4_Static_Slice;
  
  //prefer static ARP_Cache 
  advice execution("% ipstack::ARP_Cache::ipv4_lookup(%, ipstack::Interface*)") :
         order("IPv4_ARP_Static", "IPv4_ARP_Send");
  
  advice execution("% ipstack::ARP_Cache::ipv4_lookup(%, ipstack::Interface*)") &&
         args(ipv4_addr, interface) &&
         that(cache) :
         around(uint32_t ipv4_addr, Interface* interface, ARP_Cache& cache) {

    for(unsigned i=0; i<ARP_Cache::MAX_STATIC_ENTRIES; i++){      
      ARP_Cache::static_entry& entry = cache.static_entries[i];
      if(entry.ipv4_addr == ipv4_addr){
        *tjp->result() = entry.hw_addr;
        return;
      }
    }
    tjp->proceed();
  }

};
