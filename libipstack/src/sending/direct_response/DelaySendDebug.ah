// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2013 David Gr√§ff

#pragma once

#include "DelaySendMethod.h"
#include "sending/SendBuffer.h"
#include <iostream>

using namespace ipstack;

aspect delay_send_debug {
	// advice ordering: always execute this aspect first
	advice execution("% ipstack::%_Socket::send(ipstack::SendBuffer*)") : 
	order( "delay_send_debug","delay_send" );
	
	advice execution("% ipstack::%_Socket::send(ipstack::SendBuffer*)") && args(dataToSend) : around(SendBuffer* dataToSend){
		if (Demux::Inst().mHoldBack) {
			std::cout << "delay_send::avoid "<<dataToSend <<", interface "
				<< dataToSend->getInterface() << std::endl;
		}
		tjp->proceed();
	}
	
	// advice ordering: always execute this aspect first
	advice execution("% ipstack::Demux::demux(...)") : 
	order( "delay_send_debug","delay_send" );
	
	advice execution("% ipstack::Demux::demux(...)")  : after() {
		if (Demux::Inst().first_delayed_sendbuffer==0) {
			std::cout << "delay_send: All send" << std::endl;
		} else {
			std::cout << "delay_send: Not all send!" << std::endl;
		}
	}
};
