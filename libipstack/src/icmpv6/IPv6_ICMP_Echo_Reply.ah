// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "ipv6/IPv6_Packet.h"
#include "ipv6/IPv6/InternetChecksum.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "ICMPv6_Packet.h"
#include "ICMPv6_Socket.h"

using namespace ipstack;


aspect IPv6_ICMP_Echo_Reply {

	// *** Affect class: Demux
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, icmp_packet, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, ICMPv6_Packet* icmp_packet, unsigned payloadlen, Interface* interface, Demux& demux) {

		if ((icmp_packet->get_type() == ICMPv6_Packet::ICMP_TYPE_ECHO_REQUEST) &&
		(icmp_packet->get_code() == ICMPv6_Packet::ICMP_CODE_ECHO_REQUEST)) {

			ICMPv6_Socket &icmpv6instance = ICMPv6_Socket::instance();
			
			// set destination address: this is necessary before calling getMaxPayloadLength() to take the MTU of
			// the destination interface into account
			icmpv6instance.ipv6.set_dst_addr(packet->get_src_ipaddr(), interface);
			uint_fast16_t maxlen = icmpv6instance.getMaxPayloadLength();

			if (payloadlen > maxlen) {
				payloadlen = maxlen;
			}
			if (!payloadlen) return;

			demux.setDirectResponse(true);
			SendBuffer* sbi = icmpv6instance.requestSendBuffer(interface, payloadlen);
			//we have an echo request packet for IPv6
			
			if (sbi) {
				sbi->mark("IPv6_ICMP_Echo_Reply");
				ICMPv6_Packet* reply_icmp = (ICMPv6_Packet*)sbi->getDataPointer();

				reply_icmp->set_type(ICMPv6_Packet::ICMP_TYPE_ECHO_REPLY);
				reply_icmp->set_code(ICMPv6_Packet::ICMP_CODE_ECHO_REPLY);
				sbi->writtenToDataPointer(ICMPv6_Packet::ICMP_HEADER_SIZE);
				// append original payload of the source icmp packet
				sbi->write(icmp_packet->get_data(), payloadlen-ICMPv6_Packet::ICMP_HEADER_SIZE);

				icmpv6instance.send(sbi);
			}
		} else {
			tjp->proceed();
		}
	}

};
