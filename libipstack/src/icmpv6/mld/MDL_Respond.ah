// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David Gr√§ff

#pragma once
#include "ipv6/IPv6.h"
#include "ipv6/IPv6onSockets.h"
#include "../ICMPv6.h"
#include "../ICMPv6_Socket.h"
#include "MLDMessages.h"
#include "router/Interface.h"
#include "demux/Demux.h"
#include "SendBuffer.h"
#include <inttypes.h>

/**
 * Purpose: 
 * We respond immediately to a Multicast Query. RFC recommends to wait for a random time if multiple devices
 * start up at the same time after a power shortage etc.
 */
aspect NDP_MDL_Respond {
	/**
	  * Respond to multicast Query (This is a version 1 response, but should work with version 2 implementations, too)
	  */
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, icmp_packet, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, ICMPv6_Packet* icmp_packet, unsigned payloadlen, Interface* interface, Demux& demux) {

		MLDMessages::mld_multicast_listener_query* query = (MLDMessages::mld_multicast_listener_query*)icmp_packet;
		if (query->type == 130) {
			bool need_response = false;

			if (!is_not_unspecified_ipv6_address(query->addr)) { // multicast_addr == ::
				// is a General Query
				need_response = true;
// 			} else if (number_sources == 0) { // version 2 only
// 				// is a Multicast Address Specific Query
// 				if (interface->hasIPv6Address(multicast_addr))
// 					need_response = true;
			} else {
				// is a Multicast Address Specific Query: Check each address if it is one ouf ours
// 				if (interface->hasIPv6Address(query->addr)) {
// 					while (number_sources--) {

// 						nulladdr.ipaddrB8 = data;
				if (interface->hasIPv6Address(query->addr)) {
					need_response = true;
// 					break;
				}
// 						data += 16;
// 					}
// 				}
			}

			if (need_response) {
				ICMPv6_Socket &icmpv6instance = ICMPv6_Socket::instance();
				IPV6& ipv6 = icmpv6instance.ipv6;
				ipv6.set_dst_addr(packet->get_src_ipaddr(), interface);
				ipv6.set_src_addr(packet->get_dst_ipaddr());
				ipv6.setHoplimit(1);
				
				demux.setDirectResponse(true);
				SendBuffer* sbi = icmpv6instance.requestSendBuffer(interface, sizeof(MLDMessages::mldv1_listener_report));
				if (sbi) {
					sbi->mark("NDP_MDL_Respond");
					MLDMessages::write_mldv1_listener_report((char*)sbi->getDataPointer(), query->addr);
					sbi->writtenToDataPointer(sizeof(MLDMessages::mldv1_listener_report));
					icmpv6instance.send(sbi);
				}
				ipv6.restoreDefaultSendingConfiguration(); // Reset hop limit etc
			}
		} else {
			tjp->proceed();
		}
	}
};
