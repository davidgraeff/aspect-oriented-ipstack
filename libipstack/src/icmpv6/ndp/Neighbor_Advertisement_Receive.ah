// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "icmpv6/ICMPv6_Packet.h"
#include "ipv6/IPv6_Packet.h"
#include "demux/Demux.h"
#include "router/Interface.h"

#include "Demux_Neighbor_Advertisement_Slice.ah"

using namespace ipstack;

aspect Neighbor_Advertisement_Receive {
	// *** Affect class: Demux
	advice "ipstack::Demux" : slice Demux_Neighbor_Advertisement_Slice;
	
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, icmp_packet, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, ICMPv6_Packet* icmp_packet, unsigned payloadlen, Interface* interface, Demux& demux) {

		NDPNeighborMessages::NeighborAdvertisementMessage* message = (NDPNeighborMessages::NeighborAdvertisementMessage*)icmp_packet;
		if (message->type == 136 && message->code == 0) {
			if (payloadlen < sizeof(NDPNeighborMessages::NeighborAdvertisementMessage))
				return; // drop packet
				
			// Is this ndp Solicitation destinated to us?
			if (!interface->hasIPv6Address(message->target_address)) {
				return; // drop packet
			}
			
			payloadlen -= sizeof(NDPNeighborMessages::NeighborAdvertisementMessage);

			demux.ndp_neighbor_advertisement_demux(packet, message, payloadlen, interface);
			return;
		}
		tjp->proceed();
	}
};
