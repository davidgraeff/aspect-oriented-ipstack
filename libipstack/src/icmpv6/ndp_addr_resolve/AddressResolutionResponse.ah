// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012-2013 David GrÃ¤ff

#pragma once

#include "util/types.h"
#include "icmpv6/ndp/NDPNeighborMessages.h"
#include "ipv6/IPv6.h"
#include "router/Interface.h"
#include "demux/Demux.h"

aspect AddressResolutionResponse {
	// Answer other neighbor solicitations. This uses Direct-Response (link layer address of the remote is used as
	// link layer destination address
	advice execution("void ipstack::Demux::ndp_neighbor_solicitation_demux(ipstack::IPv6_Packet*, ipstack::NDPNeighborMessages::NeighborSolicitationMessage*, unsigned, ipstack::Interface*)") &&
	args(packet, message, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, NDPNeighborMessages::NeighborSolicitationMessage* message, unsigned payloadlen, Interface* interface, Demux& demux) {

		ICMPv6_Socket &icmpv6instance = ICMPv6_Socket::instance();
		IPV6& ipv6 = icmpv6instance.ipv6;
		ipv6.set_dst_addr(packet->get_src_ipaddr(), interface);
		ipv6.set_src_addr(message->target_address);
		
		const UInt8 resSize = sizeof(NDPNeighborMessages::NeighborAdvertisementMessage)+NDPMessages::multiple_of_octets(interface->getAddressSize())*8;
		
		demux.setDirectResponse(true);
		SendBuffer* sbi = icmpv6instance.requestSendBuffer(interface, resSize);
		if (sbi) {
			sbi->mark("AddressResolutionResponse");
			NDPNeighborMessages::NeighborAdvertisementMessage* msg = (NDPNeighborMessages::NeighborAdvertisementMessage*)sbi->getDataPointer();
			msg->type = (136);
			msg->code = (0);
			msg->reserved1 = 0;
			msg->reserved2 = 0;
			msg->flags = 0;
			msg->setRouter(false);
			msg->setResponse(true);
			msg->setOverride(true);
			copy_ipv6_addr(message->target_address, msg->target_address);

			NDPMessages::write_option_linklayer_address(NDPMessages::TargetLinkLayer, (char*)msg->options, interface->getAddress(), interface->getAddressSize());
			sbi->writtenToDataPointer(resSize);
			icmpv6instance.send(sbi);
		}
		
		tjp->proceed();
	}
};
