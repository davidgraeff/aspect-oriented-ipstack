// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "util/types.h"
#include "../ICMPv6.h"
#include "icmpv6/ndp/NDPNeighborMessages.h"
#include "ipv6/IPv6.h"
#include "ipv6/ndpcache/NDPCacheEntry.h"
#include "ipv6/AddressMemory.h"
#include "router/Interface.h"
#include "demux/Demux.h"

aspect AddressResolutionUpdate {
	advice execution("void ipstack::Demux::ndp_neighbor_advertisement_demux(ipstack::IPv6_Packet*, ipstack::NDPNeighborMessages::NeighborAdvertisementMessage*, unsigned, ipstack::Interface*)") &&
	args(packet, message, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, NDPNeighborMessages::NeighborAdvertisementMessage* message, unsigned payloadlen, Interface* interface, Demux& demux) {

			// Look in the NDP Cache for an entry
			NDPCacheEntry* entry = interface->ndpcache_find(message->target_address);
			if (entry) {
				entry->isRouter = message->isRouter();
				
				// e.g. for the expire aspect to reset the expire time of an IP
				interface->entryConfirmed(entry);
				
				// get dest mac
				char dest_ethernet_mac[6];
				bool foundDestMac = NDPMessages::get_option_linklayer_address(NDPMessages::TargetLinkLayer,
					(char*)message->options, payloadlen, (char*)dest_ethernet_mac);
					
				// update entry
				if (foundDestMac && (message->isOverride() || entry->state != NDPCacheEntry::NDPCacheEntryState_Reachable)) {
					memcpy(entry->hw, dest_ethernet_mac, sizeof(entry->hw));
					entry->state = NDPCacheEntry::NDPCacheEntryState_Reachable;
				}
			}

			tjp->proceed();
	}
	
	// Update: Use other neighbor solicitation messages and store remote link layer address
	advice execution("void ipstack::Demux::ndp_neighbor_solicitation_demux(ipstack::IPv6_Packet*, ipstack::NDPNeighborMessages::NeighborSolicitationMessage*, unsigned, ipstack::Interface*)") &&
	args(packet, message, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, NDPNeighborMessages::NeighborSolicitationMessage* message, unsigned payloadlen, Interface* interface, Demux& demux) {
			// get dest mac
			char dest_ethernet_mac[6];
			const bool foundDestMac = NDPMessages::get_option_linklayer_address(NDPMessages::SourceLinkLayer,
				(char*)message->options, payloadlen, (char*)dest_ethernet_mac);
			
			// Look in the NDP Cache for an entry if the Neigbor_Solicitation was addressed to us (not unspecified/broadcasted)
			if (is_not_unspecified_ipv6_address(packet->get_src_ipaddr()) && foundDestMac) {
				NDPCacheEntry* entry = interface->ndpcache_find(packet->get_src_ipaddr());
				if (!entry) { // we did not found an ipv6->ethernet entry
					// we got a neighbor solicitation and do not know the remote host: we will add it to the ndp cache
					// This will trigger a neighbor solicitation send to that remote host
					// If address expire is activated and the remote host does not respond (is not reachable), we will remove
					// the entry at same time in the future.
					entry = interface->addNDPCacheEntry(packet->get_src_ipaddr(), (UInt8*)dest_ethernet_mac, NDPCacheEntry::NDPCacheEntryState_Stale);
				}
			}

			tjp->proceed();
	}
};
