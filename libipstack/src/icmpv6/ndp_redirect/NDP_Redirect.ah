// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once
/**
 * Purpose: The NDP Redirect message is received from a router if we send
 * a packet to a router which destination address is on-link. The router will
 * notify us, to use the on-link address directly.
 * Implementation detail: We put the address into the destination cache.
 * Dependencies: Destination cache, ICMPv6, IPv6
 */

#include "ipv6/IPv6.h"
#include "ipv6/IPv6onSockets.h"
#include "../ICMPv6.h"
#include "icmpv6/ndp/NDPMessages.h"
#include "router/Interface.h"
#include "router/Router.h"
#include "demux/Demux.h"
#include "util/ipstack_inttypes.h"

aspect NDP_Redirect {
	// Redirect message
	struct RedirectMessage {
		uint8_t type; // 3
		uint8_t code; // 4
		uint16_t checksum;
		uint32_t reserved;
		
		ipv6addr target_address;
		ipv6addr destination_address;
		uint8_t options[];
	} __attribute__((packed));
	
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, icmp_packet, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, ICMPv6_Packet* icmp_packet, unsigned payloadlen, Interface* interface, Demux& demux) {
			RedirectMessage* message = (RedirectMessage*)icmp_packet;
		if ((message->type == 137) && (message->code == 0)) {
			if (payloadlen < sizeof(RedirectMessage))
				return; // drop packet
			payloadlen -= sizeof(RedirectMessage);

			// Check all options of this message
			char dest_ethernet_mac[6];
			bool foundDestMac = NDPMessages::get_option_linklayer_address(NDPMessages::TargetLinkLayer, (char*)message->options, payloadlen, dest_ethernet_mac);

			NDPCacheEntry* ndpcacheentry = interface->addNDPCacheEntry(message->target_address, (uint8_t*)dest_ethernet_mac,
			foundDestMac ? NDPCacheEntry::NDPCacheEntryState_Reachable : NDPCacheEntry::NDPCacheEntryState_Incomplete);

			if (!ndpcacheentry)
				return;

			IPV6* ipv6instance = Router::Inst().getFirstDestinationCacheEntry();
			while (ipv6instance) {
				if (compare_ipv6_addr(ipv6instance->get_dst_addr(), message->destination_address)) {
					ipv6instance->set_nexthop_ndpcache_entry(ndpcacheentry);
				}
				ipv6instance = ipv6instance->getNext();
			}
		} else {
			tjp->proceed();
		}
	}
};
