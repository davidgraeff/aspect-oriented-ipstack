// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "util/ipstack_inttypes.h"
#include "ICMPV6/ICMPv6_Packet.h"
#include "icmpv6/ndp/NDPNeighborMessages.h"
#include "ipv6/IPv6_Packet.h"
#include "ipv6/ndpcache/NDPCacheEntry.h"
#include "ipv6/AddressMemory.h"
#include "router/Interface.h"
#include "demux/Demux.h"

using namespace ipstack;

aspect Neighbor_Advertisement_Receive {
	advice execution("bool ipstack::ICMPv6_Socket::acceptedData(%,%)") &&
	args(type, code) : around(uint8_t type, uint8_t code) {
		if ((type == 136) &&
			(code == 0)) {
			*(tjp->result()) = true;
			return;
		}
		tjp->proceed();
	}
	
	advice execution("void ipstack::ICMPv6_Socket::receiveCallback(ipstack::SmartReceiveBufferPtr&)") &&
	args(b) : around(SmartReceiveBufferPtr& b) {

		ICMPv6_Packet* icmp_packet = static_cast<ICMPv6_Packet*>(b.get_payload_data());
		if ((icmp_packet->get_type() == 136) && (icmp_packet->get_code() == 0)) {
			
			// Look in the NDP Cache for an entry
			NDPCacheEntry* entry = interface->ndpcache_find(message->target_address);
			if (entry) {
				entry->isRouter = message->isRouter();
				
				// e.g. for the expire aspect to reset the expire time of an IP
				interface->entryConfirmed(entry);
				
				// get dest mac
				char dest_ethernet_mac[6];
				bool foundDestMac = NDPMessages::get_option_linklayer_address(NDPMessages::TargetLinkLayer,
					(char*)message->options, payloadlen, (char*)dest_ethernet_mac);
					
				// update entry
				if (foundDestMac && (message->isOverride() || entry->state != NDPCacheEntry::NDPCacheEntryState_Reachable)) {
					memcpy(entry->hw, dest_ethernet_mac, sizeof(entry->hw));
					entry->state = NDPCacheEntry::NDPCacheEntryState_Reachable;
				}
			}

		}
	}
};
