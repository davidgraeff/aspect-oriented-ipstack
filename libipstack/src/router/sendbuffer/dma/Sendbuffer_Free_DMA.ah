// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2013 David GrÃ¤ff

#pragma once
#include "util/ipstack_inttypes.h"
#include "router/sendbuffer/SendBuffer.h"
#include "router/Router.h"
#include "router/Interface.h"
#include "memory_management/SocketMemory.h"
#include "SendBuffer_Free_DMA_Slice.h"

using namespace ipstack;

/**
  * This advice adds a way to link sendbuffers. Instead of freeing them
  * with socket::free we just add those sendbuffers to the linked list.
  */
aspect SendBuffer_Free_DMA {
	advice "ipstack::Sendbuffer" : slice SendBuffer_Free_DMA_Slice;
	
	/**
	 * Instead of freeing, we add the buffer to a linked list (the head of the list
	 * is stored in Sendbuffer::free_first).
	 */
	advice execution("% ipstack::SocketMemory::freeSendbuffer(void*)") && that(socketmemory) && args(b)
		: around(SocketMemory* socketmemory, void* b) {
		
		Sendbuffer* sendbuffer = (SendBuffer*)b;
		Interface* i = sendbuffer->getInterface();
		
		// If sendbuffer can be freed do that
		if (i->hasBeenSent(sendbuffer->getDataStart()) {
			tjp->proceed();
			return;
		}
		
		sendbuffer->free_socket = socketmemory;
		if (Sendbuffer::free_first) {
			sendbuffer->free_next = Sendbuffer::free_first;
			Sendbuffer::free_first = sendbuffer;
		} else {
			sendbuffer->free_next = 0;
			Sendbuffer::free_first = sendbuffer;
		}
	}
};