// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David Gr√§ff

#pragma once
/**
 * Purspose: add bind/unbind to the socket for demux delegated methods.
 * Delegate convenience API methods for receiving. The real implementations
 * are in the IP(v4/v6) receiving slices.
 */
#include <string.h> //for memcpy
#include "receive/ReceiveBuffer.h"
#include "os_integration/Clock.h"

using namespace ipstack;

slice class UDP_Receive_Slice {
private:
	void block() {}; // block until receive event
public:
    bool addToReceiveQueue ( ReceiveBuffer* receivebuffer) {
		if (is_packetbuffer_full()) {
			return false;
		}
		packetbuffer->put(receivebuffer);
		return true;
	}
	
	/**
	 * The application has
	 * to free the memory of the buffer by calling ReceiveBuffer::free(buffer).
	 * For more information on ReceiveBuffers look into ReceiveBuffer.h
	 * Example:
	 * 
	 * ReceiveBuffer* b = socket->receive();
	 * prinft(b->getData());
	 * ReceiveBuffer::free(b);
	 */
	ReceiveBuffer* receive(){
		return (ReceiveBuffer*)packetbuffer->get();
	}
	
	/**
	 * Convenience method: Block until a packet is available or a timeout is reached.
	 * This API is only functional if not build with ONE_TASK!
	 */
	ReceiveBuffer* receive(uint64_t waitForPacketTimeoutMS) {
		ReceiveBuffer* recv = (ReceiveBuffer*)packetbuffer->get();
		if (!recv) {
			if (!waitForPacketTimeoutMS )
				return 0;
			uint64_t timeout = Clock::now() + Clock::ms_to_ticks(waitForPacketTimeoutMS);
			while(timeout < Clock::now()){
				recv = (ReceiveBuffer*)packetbuffer->get();
				if (recv)
					break;
			}
		}
		return recv;
	}
	
	/**
	 * Convenience method: Block until a packet is available.
	 * This API is only functional if not build with ONE_TASK!
	 */
	ReceiveBuffer* receiveBlock(){
		ReceiveBuffer* recv = (ReceiveBuffer*)packetbuffer->get();
		while(recv == 0){
			block();
			recv = (ReceiveBuffer*)packetbuffer->get();
		}
		return recv;
	}
};
