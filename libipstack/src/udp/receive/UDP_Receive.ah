// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012-2013 David GrÃ¤ff

#pragma once

#include "udp/UDP_Socket.h"
#include "udp/UDP_Packet.h"
#include "Demux_UDP_Slice.h"
#include "demux/receivebuffer/ReceiveBuffer.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "util/ipstack_inttypes.h"
#include "ip/InternetChecksum.h"

using namespace ipstack;

aspect UDP_Receive {

	// *** Affect class: Demux for registering a socket to be able to receive packets
	advice "ipstack::Demux" : slice Demux_UDP_Slice;

	advice destruction("ipstack::UDP_Socket") &&
	that(socket) : before(UDP_Socket& socket) {
		// remove this socket at Demux on destruction
		socket.unbind();
	}

	advice execution("void ipstack::Demux::ip_payload_demux(ipstack::ReceiveBuffer&,%)") &&
	args(buffer,payload_protocol)  && that(demux) : around(ReceiveBuffer& buffer, uint8_t payload_protocol, Demux& demux) {

		if (payload_protocol != UDP_Packet::IP_TYPE_UDP) {
			tjp->proceed();
			return;
		}

		// We could also test if remaining_size == payload_size
		uint16_t payloadlen = buffer.get_payload_size();
		if (payloadlen < UDP_Packet::UDP_HEADER_SIZE) {
			return; //len too small! Drop packet
		}
		
		UDP_Packet* udp_packet = static_cast<UDP_Packet*>(buffer.get_payload_data());

		if (udp_packet->get_checksum() != 0) {
			// This packet is protected by an internet checksum
			if (!udp_packet->checksum_valid(InternetChecksum::computePseudoHeader(packet, len, UDP_Packet::IP_TYPE_UDP), len, buffer.get_interface())) {
				// checksum wrong: drop entire packet
				return;
			}
		}
		
		buffer.p.transport_packet = udp_packet;
		buffer.setPayload(udp_packet, payloadlen-UDP_Packet::UDP_HEADER_SIZE);
		
		uint16_t udp_packet_dport = udp_packet->get_dport();

		UDP_Socket* socket = demux.udp_head_socket;
		while (socket != 0) {
			if (socket->get_sport() == udp_packet_dport) {
				if (!socket->addToReceiveQueue(buffer)) {
					demux.error_receiving_queue_full(buffer);
				}
				return; // dport match found
			}
			socket = socket->getNext(); //try next socket
		}

		demux.error_port_not_reachable(buffer);
	}
};
