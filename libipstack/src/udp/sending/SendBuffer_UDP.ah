// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "udp/UDP_Packet.h"
#include "udp/UDP_Socket.h"
#include "router/sendbuffer/SendBuffer.h"
#include "util/ipstack_inttypes.h"

using namespace ipstack;

/**
 * Adds the UDP header to a SendBuffer
 */
aspect Sendbuffer_UDP  {
	advice execution("% ipstack::UDP_Socket::estimateSendBufferMinSize()") && result(v) :
		after(unsigned v) {
			*tjp->result() = v + UDP_Packet::UDP_HEADER_SIZE;
	}

	advice execution("% ipstack::UDP_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv%" , "Sendbuffer_UDP");
		
	advice execution("% ipstack::UDP_Socket::prepareSendBuffer(...)") && args(sendbuffer, use_as_response) :
		around(SendBuffer* sendbuffer, ReceiveBuffer* use_as_response) {
			
		// set ip next header protocol to UDP
		*(sendbuffer->p.nextheaderfield_ip) = UDP_Packet::IP_TYPE_UDP;

		UDP_Packet* udp_packet = sendbuffer->getDataPointer();
		sendbuffer->p.transport_packet = udp_packet;
		tjp->that()->setupHeader(udp_packet, sendbuffer->getRemainingSize());
		sendbuffer->writtenToDataPointer(UDP_Packet::UDP_HEADER_SIZE);

		// Proceed if direct response is off or if this should not be a reponse to a packet
		if (!use_as_response) {
			tjp->proceed();
			return;
		}

		// Set destination addr := remote src addr
		const UDP_Packet* remote_udp_packet = (UDP_Packet*)use_as_response->p.transport_packet;
		udp_packet->set_dport(remote_udp_packet->get_sport());
		
		tjp->proceed();
	}
};
