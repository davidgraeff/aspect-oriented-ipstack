// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "UDP_Socket.h"
#include "Demux_UDP_Slice.ah"
#include "UDP_Receive_Slice.ah"
#include "demux/Demux.h"

using namespace ipstack;

aspect UDP_Receive {

	// *** Affect class: Demux for registering a socket to be able to receive packets
	advice "ipstack::Demux" : slice Demux_UDP_Slice;

	/* Affect class: UDP_Socket: Add bind/unbind delegation to UDP sockets and a copyPayloadToSocket method for receiving */
	advice "ipstack::UDP_Socket" : slice UDP_Receive_Slice;

	advice destruction("ipstack::UDP_Socket") &&
	that(socket) : before(UDP_Socket& socket) {
		// remove this socket at Demux on destruction
		socket.unbind();
	}
	
	advice execution("% ipstack::UDP_Socket::bind()") &&
	that(socket) : around(UDP_Socket& socket) {
		*(tjp->result()) =  Demux::Inst().bind ( &socket );
	}
	
	advice execution("% ipstack::UDP_Socket::unbind()") &&
	that(socket) : around(UDP_Socket& socket) {
		Demux::Inst().unbind ( &socket );
	}
	

};
