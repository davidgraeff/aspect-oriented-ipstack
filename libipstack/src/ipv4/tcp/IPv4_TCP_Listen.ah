// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "../IPv4.h"
#include "tcp/TCP.h"
#include "demux/Demux.h"
#include "router/Interface.h"

using namespace ipstack;

aspect IPv4_TCP_Listen {
	//try to find fully qualified socket first. after that, search for listen sockts.
	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") :
		order("IPv4_TCP_Receive", "IPv4_TCP_Listen");

	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, len, interface) && that(demux) :
		around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux) {

		if (packet->get_protocol() == TCP_Segment::IP_TYPE_TCP) {
			//Length and checksum is already verified by "IPv4_TCP_Receive.ah"

			TCP_Segment* tcp_segment = (TCP_Segment*) packet->get_data();

			//only process SYN packets:
			if (tcp_segment->has_SYN() == true) {
				uint16_t tcp_segment_dport = tcp_segment->get_dport();

				TCP_Socket* socket = demux.tcp_head_listen_socket;

				// preprocessing length: subtract the ipv4 header size
				len -= packet->get_ihl() * 4;

				while (socket != 0) {
					if (socket->get_sport() == tcp_segment_dport) {
						//dport match found
						if (socket->packetBufferFull()) {
							demux.error_receiving_queue_full(packet, interface);
						} else if (!socket->addToReceiveQueue(tcp_segment, len)) {
							demux.error_receiving_memory_too_small(packet, interface);
						} else {
// 							printf("IPv4_TCP_Listen LISTEN->Connected %p\n", socket);
							demux.deaf(socket); //remove socket's 'listening' state
							//add remote ipv4 addr
							socket->ipv4.set_dst_addr(packet->get_src_ipaddr());
						}
						return;
					}
					socket = socket->getNext(); //try next socket
				}
			}
		}
		tjp->proceed(); //try another 'ipv4_demux'-aspect
	}

};
