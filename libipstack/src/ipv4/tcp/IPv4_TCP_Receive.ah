// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "../IPv4.h"
#include "tcp/TCP.h"
#include "tcp/TCP_Socket.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "../InternetChecksum.h"
#include "util/types.h"

using namespace ipstack;

aspect IPv4_TCP_Receive {
	// first, look at TCP
	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") :
		order("%TCP%", "%UDP%");

	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, len, interface) && that(demux) :
		around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux) {

		if (packet->get_protocol() != TCP_Segment::IP_TYPE_TCP) {
			tjp->proceed();
			return;
		}

		if (interface->getIPv4Addr() == 0) {
			// we do not accept tcp traffic if we do not have an ip address (yet).
			return;
		}
		
		//we have a tcp packet
		if (len < TCP_Segment::TCP_MIN_HEADER_SIZE || len < packet->get_ihl() * 4) {
			return; //len too small! Drop packet
		}

		// preprocessing length: subtract the ipv4 header size
		len -= packet->get_ihl() * 4;

		TCP_Segment* tcp_segment = (TCP_Segment*) packet->get_data();
		
		//verify tcp checksum
		if (!tcp_segment->checksum_valid(InternetChecksumV4::computePseudoHeader(packet, len, TCP_Segment::IP_TYPE_TCP), len, interface)) {
			return; //wrong! Drop packet
		}

		TCP_Socket* socket = demux.tcp_head_socket;
		
		const UInt16 dport = tcp_segment->get_dport();
		const UInt16 sport = tcp_segment->get_sport();
		const UInt32 sip = packet->get_src_ipaddr();
		const UInt32 dip = packet->get_dst_ipaddr();
		
		while (socket != 0) {
			if (socket->get_sport() == dport) {
				if (socket->get_dport() == sport) {
					if (socket->ipv4.get_dst_addr() == sip) {
						if (socket->ipv4.get_src_addr() == dip) {
							//fully qualified socket found.
							if (socket->packetBufferFull()) {
								demux.error_receiving_queue_full(packet, interface);
							}
							else if (!socket->addToReceiveQueue(tcp_segment, len)) {
								demux.error_receiving_memory_too_small(packet, interface);
							}
							return;
						}
					}
				}
			}
			socket = socket->getNext(); //try next socket
		}
		
		// try another TCP advice (e.g. listen, reset)
		tjp->proceed();
	}
};
