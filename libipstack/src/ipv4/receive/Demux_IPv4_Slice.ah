// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once
#include "ipv4/IPv4_Packet.h"
#include "router/Interface.h"

using namespace ipstack;

slice class Demux_IPv4_Slice {
private:
	void ipv4_demux(ReceiveBuffer& buffer){
		//is the receiving interface running ipv4?
		Interface* interface = buffer.get_interface();
		if (interface->isIPv4Up() == false) {
			//discard packets on down interfaces
			return;
		}

		IPv4_Packet* packet = (IPv4_Packet*)buffer.get_payload_data();
		unsigned len = packet->validPacketLength(len); //strip packet (e.g. ethernet padding)
		if (len == 0) {
			//invalid packet length
			return;
		}

		if (packet->get_version() != IPv4_Packet::IPV4_VERSION) {
			//no ipv4 packet
			return;
		}

		if (packet->get_ttl() == 0) {
			error_ttl(buffer);
			return;
		}

		//verify IPv4 header checksum:
		if (packet->validPacketChecksum(interface) == false) {
			return;
		}
		
		//IPv4 packet has passed all verification check so far ...
		if (packet->get_dst_ipaddr() == interface->ipv4_addr) {
			//this packet is destined for this local host
			buffer.p.ip_packet = packet;
			buffer.setPayload(packet, len);
			if (!ip_payload_demux(buffer, packet->get_protocol()))
				error_no_protocol_handler_v4(buffer);
		} else {
			// No routing possible, ttl over
			if (packet->get_ttl() <= 1) {
				error_ttl(buffer);
				return;
			}

			//this packet has to be routed elsewhere
			ipv4_forward(buffer);
		}
	}
	
    void ipv4_forward (ReceiveBuffer& buffer) {
        //Aspects to be weaved here!
    }
    
	void error_ttl(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}

	void error_no_protocol_handler_v4(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}
};
