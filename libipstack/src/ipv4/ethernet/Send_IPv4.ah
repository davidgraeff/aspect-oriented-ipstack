// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "ethernet/Eth_Frame.h"
#include "router/sendbuffer/SendBuffer.h"
#include "util/ipstack_inttypes.h"
#include "ipv4/IPv4_Packet.h"
#include "ipv4/IPv4onSockets.h"

using namespace ipstack;

/**
 * Add the ethernet header frame size to the createSendBuffer(size)
 * and fill in the ethernet header in prepareSendBuffer(...)
 */
aspect Sendbuffer_IPv4_Ethernet {
	// call-advice ordering: always add the ethernet header before the IPv4 header!
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv4_Ethernet" , "Sendbuffer_IPv4");
	
	// add ethernet header to the SendBuffer. This method is only called with a valid
	// SendBuffer -> no runtime checks.
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") && args(sendbuffer)  :
		around(SendBuffer* sendbuffer) {

		// only for IPv4
		if (tjp->that()->m_useipversion != 4) {
			tjp->proceed();
			return;
		}

		Interface* interface = tjp->that()->getUsedInterface();
		if (interface->getType() != Interface::ETHERNET) {
			tjp->proceed();
			return;
		}

		//we have an ethernet device
		Eth_Frame* eth_frame = (Eth_Frame*)(sendbuffer->getDataPointer());
		sendbuffer->p.ethernet_frame = eth_frame;
		sendbuffer->writtenToDataPointer(Eth_Frame::ETH_HEADER_SIZE);
		
		uint32_t ip = tjp->that()->ipv4.get_nexthop_ipaddr();
		
		eth_frame->set_type(IPv4_Packet::ETH_TYPE_IPV4);
		eth_frame->set_src_hwaddr(interface->getAddress());
		
		uint8_t leftpart = (uint8_t)(ip>>24);
		
		// If this is a broadcast ip address (255.255.255.255), use the broadcast mac
		if (ip == (uint32_t) - 1) { // Broadcast address -1==255.255.255.255==all bits 1
			eth_frame->set_dst_hwaddr_broadcast();
		}
		
		// If this is a multicast ip address (224.0.0.0-239.255.255.255), use the multicast mac
		else if ( leftpart >=224 && leftpart<=239) {
			// that is 01-00-5e-00-00-00 filled with the last 23 Bits of the ip address.
			leftpart &= 0x7f;
			uint8_t emptymac[6] = {0x01, 0x00, 0x5e, leftpart,((uint8_t) (ip>>16)),((uint8_t) ip)};
			eth_frame->set_dst_hwaddr(emptymac);
		} else {
			sendbuffer->setState(SendBuffer::WritingState | SendBuffer::ResolveLinkLayerStateOption);
		}
		
		tjp->proceed();
	}
};
