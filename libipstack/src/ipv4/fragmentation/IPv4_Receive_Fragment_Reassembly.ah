// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPV4_RECEIVE_FRAGMENT_REASSEMBLY_AH__
#define __IPV4_RECEIVE_FRAGMENT_REASSEMBLY_AH__

#include "ipv4/IPv4_Packet.h"
#include "demux/Demux.h"
#include "router/Interface.h"

#include "operating_system_integration/Clock.h"

#include <string.h> //for memcpy and memset

using namespace ipstack;


aspect IPv4_Receive_Fragment_Reassembly {

  enum { TIMEOUT = 60, //seconds, within next fragment must arrive
         BUFFERSIZE = 768 }; //max. size of the entire reassembled IPv4 packet

  uint64_t expired_time;
  
  uint8_t buffer[BUFFERSIZE];
  uint8_t bitmap[BUFFERSIZE / (8 * 8)];

  uint8_t header_len; // set when first fragment arrives
  uint16_t total_len; // 0 until last fragment received
  
  void update_bitmap(unsigned start, unsigned end){
    start = start & 0xFFFFFFF8; //start at multiple of 8
      
    for(unsigned i=start; i <= end; i+=8){
      unsigned index = i/64;
      unsigned value = (i%64)/8;
      bitmap[index] |= (1 << value);
    }
  }
  
  bool full_bitmap(){
    //check all bytes in the bitmap except the last one
    for(unsigned i=0; i < (unsigned) ((total_len / (8 * 8)) - 1); i++) {
      if(bitmap[i] != 0xFF) {
        return false;
      }
    }    
    //check the last byte now
    uint8_t value = 0;
    unsigned last_byte = total_len & 0xFFFFFF40; //start at multiple of 64
    for(unsigned i=last_byte; i <= total_len; i+=8){
      int bitmap_value = (i%64)/8;
      value |= (1 << bitmap_value);
    }
    if(bitmap[(total_len / (8 * 8))] == value){    
      return true;
    }
    
    return false;
  }
  
  void clear_bitmap(){
    memset(bitmap, 0, sizeof(bitmap));
  }
  

  // *** Affect class: Demux
  advice execution("bool ipstack::Demux::ipv4_reassemble(ipstack::IPv4_Packet*&, unsigned&, ipstack::Interface*, %)") &&
         args(packet, len, interface, fragment_offset) && that(demux) :
         after(IPv4_Packet* &packet, unsigned &len, Interface* interface, uint16_t fragment_offset, Demux& demux){

    uint64_t curr_time = Clock::now(); //in ticks
    
    bool copy_data = false; //is set if the current packet shall be copied into buffer
    
    if(curr_time < expired_time){
      // buffer is hot
      
      IPv4_Packet* header = (IPv4_Packet*) buffer;
      
      if( (header->get_src_ipaddr() == packet->get_src_ipaddr()) &&
          (header->get_dst_ipaddr() == packet->get_dst_ipaddr()) &&
          (header->get_id() == packet->get_id()) ) {
            
        //this fragment belongs to buffer
        copy_data = true;
      }
    }
    else{
      //buffer is cold
      //if(header_len != 0){ //DEBUG ONLY
      //  std::cout << "IPv4 Fragment(s) discarded: Timeout!" << std::endl;
      //}
      
      clear_bitmap();
      total_len = 0;
      header_len = packet->get_ihl()*4;
      
      //copy ip header      
      memcpy(buffer, packet, header_len);      
      update_bitmap(0, header_len);
      
      copy_data = true;
    }
    
    if(copy_data == true){
      unsigned data_start = header_len + fragment_offset; //buffer offset in bytes
      unsigned data_len = packet->get_total_len() - header_len; //payload length (for memcpy)
      unsigned data_end = data_start + data_len; //buffer offset in bytes
      
      if(data_end > BUFFERSIZE){
        expired_time = 0; //buffer empty
        //std::cout << "IPv4 Fragment(s) discarded: Too big! ("
			//<<data_end<<" bytes)\n";
        return; //buffer too small!
      }
      
      //TODO: don't use get_data() since it evaluates ihl once again!
      memcpy(&buffer[data_start], packet->get_data(), data_len);
      update_bitmap(data_start, data_end);
      
      if(packet->get_flags() != IPv4_Packet::IPV4_MF_FLAG){ //TODO: flags as a parameter for ipv4_reassemble?
        //This is the last fragment. total length is known
        total_len = data_end;
      }
      
      if(total_len != 0){
        //try to reassemble ...
        if(full_bitmap()){
          //reassembly complete :-)          
          //IPv4_Packet* packet = (IPv4_Packet*) buffer;
          packet = (IPv4_Packet*) buffer; //overwrite reference parameter
          packet->set_fragment_offset(0); //no more fragments
          packet->set_flags(0); // no flags
          packet->set_total_len(total_len); //overall length
          //packet->computeChecksum(); //Insert IPv4 header checksum (TODO: don't do that!)
          //demux.ipv4_demux(packet, total_len, interface);
          len = total_len; //overwrite reference parameter
          
          expired_time = 0; //buffer empty
          
          *tjp->result() = true;
          return;
        }
      }
      
      //restart timeout (until next fragment must arrive)
      expired_time = curr_time + Clock::ms_to_ticks(TIMEOUT * 1000UL);   
    }
  }
  
};

#endif // __IPV4_RECEIVE_FRAGMENT_REASSEMBLY_AH__
