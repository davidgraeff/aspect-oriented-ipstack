// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "router/sendbuffer/SendBuffer.h"
#include "ipv4/IPv4_Packet.h"
#include "util/ipstack_inttypes.h"


using namespace ipstack;

/**
 * Set the IPv4 header
 */
aspect Sendbuffer_IPv4 {
	advice execution("% ipstack::%::estimateSendBufferMinSize()" && derived("ipstack::SendBufferAPI")
		&& derived("ipstack::IP")) && result(v) :
		after(unsigned v) {
		// check ip version
		if (tjp->that()->m_useipversion == 4) {
			*tjp->result() = v + tjp->that()->ipv4.getSpecificHeaderSize();
		}
	}

	advice execution("% ipstack::%::prepareSendBuffer(...)" && derived("ipstack::SendBufferAPI")
		&& derived("ipstack::IP")) && args(sendbuffer, use_as_response) :
		around(SendBuffer* sendbuffer, ReceiveBuffer* use_as_response) {

		// check ip version
		if (tjp->that()->m_useipversion == 4) {
			sendbuffer->p.ip_packet = sendbuffer->getDataPointer();
			IPv4_Packet* ip = (IPv4_Packet*)sendbuffer->p.ip_packet;
			tjp->that()->ipv4.setupHeader(ip, sendbuffer->getRemainingSize());
			sendbuffer->writtenToDataPointer(tjp->that()->ipv4.getSpecificHeaderSize());

			// set pointer to next header field
			sendbuffer->p.nextheaderfield_ip = ip->get_nextheaderPointer();
			
			// Proceed if direct response is off or if this should not be a reponse to a packet
			if (use_as_response) {
				// Set destination addr := remote src addr
				const IPv4_Packet* remote_ip4_packet = (IPv4_Packet*)use_as_response->p.ip_packet;
				ip6_packet->set_dst_ipaddr(remote_ip4_packet->get_src_ipaddr());
			}
		}
		tjp->proceed();
	}
};
