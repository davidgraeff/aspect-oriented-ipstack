// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "udp/UDP.h"
#include "udp/UDP_Socket.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "../IPv4.h"
#include "../Socket_IPv4_Slice.ah"
#include "ReceiveBufferUDPIPv4.h"
#include "Demux_UDP_IPv4_Slice.ah"
#include "util/types.h"

using namespace ipstack;

aspect IPv4_UDP_Receive {

	// Interceptable error messages
	advice "ipstack::Demux" : slice Demux_UDP_IPv4_Slice;

	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
	args(ipv4_packet, len, interface) && that(demux) :
	around(IPv4_Packet* ipv4_packet, unsigned len, Interface* interface, Demux& demux) {

		if (ipv4_packet->get_protocol() != UDP_Packet::IP_TYPE_UDP) {
			tjp->proceed();
			return;
		}

		if (len < UDP_Packet::UDP_HEADER_SIZE || len < ipv4_packet->get_ihl() * 4) {
			return; //len too small! Drop packet
		}
		
		UDP_Packet* udp_packet = (UDP_Packet*) ipv4_packet->get_data();

		UInt16 udp_packet_dport = udp_packet->get_dport();

		UDP_Socket* socket = demux.udp_head_socket;
		while (socket != 0) {
		if (socket->get_sport() == udp_packet_dport) {
				// copy the payload out of the udp socket
				ReceiveBufferUDPIPv4* r = ReceiveBufferUDPIPv4::createReceiveBufferUDPIPv4(socket->get_Mempool(),
						udp_packet->get_data(), udp_packet->get_length() - UDP_Packet::UDP_HEADER_SIZE, udp_packet->get_sport(),
						ipv4_packet->get_src_ipaddr());
				if (!r) {
					demux.error_receiving_memory_too_small(ipv4_packet, interface);
				}
				if (!socket->addToReceiveQueue(r)) {
					demux.error_receiving_queue_full(ipv4_packet, interface);
				}
				return; // dport match found
			}
			socket = socket->getNext(); //try next socket
		}

		demux.error_port_not_reachable(ipv4_packet, interface);
	}
};
