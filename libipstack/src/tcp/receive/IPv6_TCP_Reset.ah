// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "ipv6/IPv6_Packet.h"
#include "tcp/TCP_Segment.h"
#include "tcp/Management_TCP_Socket.h"
#include "demux/Demux.h"
#include "router/Interface.h"


using namespace ipstack;

aspect IPv6_TCP_Reset {
	//only send resets if no connection could be found:
	advice execution("void ipstack::Demux::ipv6_demux(ipstack::IPv6_Packet*, unsigned, ipstack::Interface*)") :
		order("IPv6_TCP_%" && !"IPv6_TCP_Reset", "IPv6_TCP_Reset");

	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") &&
	args(interface, packet, payload, payload_length, nextHeader) && that(demux) :
		around(Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader, Demux& demux) {

		if (nextHeader == TCP_Segment::IP_TYPE_TCP) {
			TCP_Segment* tcp_segment = (TCP_Segment*) payload;
			
			//do not reply resets with resets
			if (tcp_segment->has_RST() == false) {
				*(tjp->result()) = true; 
				//"Active Side Causes Half-Open Connection Discovery"
				//rfc793 page 35 (Figure 11.)
				Management_TCP_Socket &resetsocketinstance = Management_TCP_Socket::instance();
				
				demux.setDirectResponse(true);
				resetsocketinstance.ipv6.set_dst_addr(packet->get_src_ipaddr());
				SendBuffer* sendbuffer = resetsocketinstance.requestSendBufferTCP(interface);
				if (!sendbuffer) {
					demux.error_receiving_queue_full_v6(packet, interface);
					*(tjp->result()) = true;
					return;
				}

				resetsocketinstance.prepareResponse(sendbuffer, tcp_segment, payload_length);

				resetsocketinstance.send(sendbuffer);
			}
		} else {
			tjp->proceed(); //try another 'ipv6_demux'-aspect
		}
	}

};
