// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert, 2012-2013 David GrÃ¤ff

#pragma once

#include "Demux_TCP_Slice.h"
#include "ip/InternetChecksum.h"
#include "tcp/TCP_Segment.h"
#include "tcp/TCP_Socket.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "util/ipstack_inttypes.h"

using namespace ipstack;

aspect TCP_Receive {
	// *** Affect class: Demux for registering a socket to be able to receive packets
	advice "ipstack::Demux" : slice Demux_TCP_Slice;

	advice execution("void ipstack::Demux::ip_payload_demux(ipstack::ReceiveBuffer&,%)") &&
	args(buffer,payload_protocol)  && that(demux) : around(ReceiveBuffer& buffer, uint8_t payload_protocol, Demux& demux) {

		if (payload_protocol != TCP_Segment::IP_TYPE_TCP) {
			tjp->proceed();
			return;
		}

		
		uint16_t payloadlen = buffer.get_payload_size();
		if (payloadlen < TCP_Segment::TCP_MIN_HEADER_SIZE) {
			return; //len too small! Drop packet
		}

		TCP_Segment* tcp_segment = static_cast<TCP_Segment*>(buffer.get_payload_data());
		
		//verify tcp checksum
		if (!tcp_segment->checksum_valid(InternetChecksum::computePseudoHeader(packet, len, TCP_Segment::IP_TYPE_TCP), len, interface)) {
			// checksum wrong: drop entire packet
			return;
		}

		buffer.p.transport_packet = tcp_segment;
		// The new payload of the buffer is NOT the tcp segment payload, that is extracted
		// by the tcp socket class!
		//buffer.setPayload(tcp_segment, payloadlen-TCP_Segment::TCP_MIN_HEADER_SIZE);
		
		TCP_Socket* socket = demux.tcp_head_socket;
		
		const uint16_t dport = tcp_segment->get_dport();
		const uint16_t sport = tcp_segment->get_sport();
		
		while (socket != 0) {
			if (socket->get_sport() == dport && socket->get_dport() == sport && socket->ip.is_ip_peer_addr_matching(packet)) {
				//fully qualified socket found.
				if (!socket->addToReceiveQueue(buffer)) {
					demux.error_receiving_queue_full(buffer);
				}
				return;
			} else if (socket->isListening() && socket->get_sport() == dport && tcp_segment->has_SYN()) {
				// listener socket found
				// 1) set ip address of peer as destination address
				socket->ip.set_dst_ip_addr_to_peer_addr(buffer.p.ip_packet);
				// 2) set destination port
				socket->set_dport(tcp_segment->get_sport());
				// put packet into socket buffer
				if (!socket->addToReceiveQueue(buffer)) {
					demux.error_receiving_queue_full(buffer);
				}
				return;
			}
			socket = socket->getNext(); //try next socket
		}
		
		//do not reply resets with resets
		if (tcp_segment->has_RST()) {
			return;
		}
		
		demux.tcp_no_connection(buffer);
	}
};
