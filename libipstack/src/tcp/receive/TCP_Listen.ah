// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "TCP_Segment.h"
#include "Demux_TCP_Listen_Slice.ah"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "ReceiveBuffer.h"

using namespace ipstack;

aspect TCP_Listen_aspect {
	// *** Affect class: Demux
	advice "ipstack::Demux" : slice Demux_TCP_Listen_Slice;

	advice execution("bool ipstack::TCP_Socket::listen()") && that(socket) :
		around(TCP_Socket& socket) {
		while (socket.isEstablished() == false) {
			if (Demux::Inst().listen(&socket) == false) { //add listen-socket to Demux
				*(tjp->result()) = false;
				return;
			}
			tjp->proceed();

// 			printf("TCP_Socket::listen() wait syn 2\n");
			//Wait for SYN packet
			while (socket.isListening()) {
				ReceiveBuffer* receiveB = (ReceiveBuffer*)socket.packetbuffer->get();
				if (receiveB == 0) {
					socket.input(0, 0);
				} else {
					TCP_Segment* segment = (TCP_Segment*)receiveB->getData();
					socket.set_dport(segment->get_sport()); //set dport to remote's sport
					//bind this socket at Demux to ipv4 addresses and tcp ports
					if (socket.bind() == false) {
						//this connection (ipv4 addresses, tcp ports) is already used
						ReceiveBuffer::free(receiveB);
						Demux::Inst().listen(&socket); //listen for next SYN packet (at Demux)
					} else {
						socket.input(segment, receiveB->getSize()); //deliver SYN packet
					}
				}
			}
			socket.recv_loop();
			if (socket.isEstablished() == false) {
				socket.unbind(); //remove connection at Demux
			}
		}
		//return if connection is established
		*(tjp->result()) = true;
	}
};


#pragma once

#include "ipv4/IPv4_Packet.h"
#include "tcp/TCP_Segment.h"
#include "demux/Demux.h"
#include "router/Interface.h"

using namespace ipstack;

aspect IPv4_TCP_Listen {
	//try to find fully qualified socket first. after that, search for listen sockts.
	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") :
		order("IPv4_TCP_Receive", "IPv4_TCP_Listen");

	advice execution("void ipstack::Demux::ipv4_demux(ipstack::IPv4_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, len, interface) && that(demux) :
		around(IPv4_Packet* packet, unsigned len, Interface* interface, Demux& demux) {

		if (packet->get_protocol() == TCP_Segment::IP_TYPE_TCP) {
			//Length and checksum is already verified by "IPv4_TCP_Receive.ah"

			TCP_Segment* tcp_segment = (TCP_Segment*) packet->get_data();

			//only process SYN packets:
			if (tcp_segment->has_SYN() == true) {
				uint16_t tcp_segment_dport = tcp_segment->get_dport();

				TCP_Socket* socket = demux.tcp_head_listen_socket;

				// preprocessing length: subtract the ipv4 header size
				len -= packet->get_ihl() * 4;

				while (socket != 0) {
					if (socket->get_sport() == tcp_segment_dport) {
						//dport match found
						if (socket->is_packetbuffer_full()) {
							demux.error_receiving_queue_full(packet, interface);
						} else if (!socket->addToReceiveQueue(tcp_segment, len)) {
							demux.error_receiving_memory_too_small(packet, interface);
						} else {
							demux.deaf(socket); //remove socket's 'listening' state
							//add remote ipv4 addr
							socket->ipv4.set_dst_addr(packet->get_src_ipaddr());
						}
						return;
					}
					socket = socket->getNext(); //try next socket
				}
			}
		}
		tjp->proceed(); //try another 'ipv4_demux'-aspect
	}

};
#pragma once

#include "ipv6/IPv6_Packet.h"
#include "tcp/TCP_Segment.h"
#include "tcp/TCP_Socket.h"
#include "demux/Demux.h"
#include "router/Interface.h"

using namespace ipstack;

aspect IPv6_TCP_Listen {
	//try to find fully qualified socket first. after that, search for listen sockts.
	advice execution("void ipstack::Demux::ipv6_demux(ipstack::IPv6_Packet*, unsigned, ipstack::Interface*)") :
		order("IPv6_TCP_Receive", "IPv6_TCP_Listen");

	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") &&
	args(interface, packet, payload, payload_length, nextHeader) && that(demux) :
		around(Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader, Demux& demux) {


		if (nextHeader == TCP_Segment::IP_TYPE_TCP) {
			//Length and checksum is already verified by "IPv6_TCP_Receive.ah"

			TCP_Segment* tcp_segment = (TCP_Segment*) payload;

			//only process SYN packets:
			if (tcp_segment->has_SYN() == true) {
				uint16_t tcp_segment_dport = tcp_segment->get_dport();

				TCP_Socket* socket = demux.tcp_head_listen_socket;

				while (socket != 0) {
					if (socket->get_sport() == tcp_segment_dport) {
						*(tjp->result()) = true; // end of ipv6 packet parsing
						//dport match found
						if (socket->is_packetbuffer_full()) {
							demux.error_receiving_queue_full_v6(packet, interface);
						} else if (!socket->addToReceiveQueue(tcp_segment, payload_length)) {
							demux.error_receiving_memory_too_small_v6(packet, interface);
						} else {
							demux.deaf(socket); //remove socket's 'listening' state
							//add remote ipv6 addr
							socket->ipv6.set_dst_addr(packet->get_src_ipaddr());
						}
						*(tjp->result()) = true;
						return;
					}
					socket = socket->getNext(); //try next socket
				}
			}
		}
		tjp->proceed(); //try another 'ipv6_demux'-aspect
	}

};