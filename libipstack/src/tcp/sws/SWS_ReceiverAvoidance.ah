// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert

#pragma once
#include "util/ipstack_inttypes.h"
#include "../TCP_Socket.h"

using namespace ipstack;

aspect SillyWindowSyndrome_Receiver_Avoidance {
  
  //reference:
  //RFC 813: WINDOW AND ACKNOWLEDGEMENT STRATEGY IN TCP by David D. Clark
  
  advice execution("% ipstack::TCP_Socket::getReceiveWindow()") &&
         that(socket) && result(window) :
         after(TCP_Socket& socket, uint16_t window){
    if(socket.state != TCP_Socket::SYNSENT && socket.state != TCP_Socket::CLOSED){
      if( (window*2U < socket.maxReceiveWindow_Bytes) && (window < socket.mss) ) {
        //artificially close the advertised window until
        // 1) at least 1/2 buffer space is free OR
        // 2) one full-sized segment can be accepted
        *tjp->result() = 0;
      }
    }
  }
  
  advice call("void ipstack::TCP_ReceiveBuffer::copyData(void*, unsigned)") &&
         that(socket) && within("ipstack::TCP_Socket") :
         around(TCP_Socket& socket) {
    bool receiveWindowClosed = (socket.getReceiveWindow() == 0);
    //remember if receive window is closed before copying data
    tjp->proceed(); //remove data from ReceiveBuffer -> grow ReceiveWindow
    if(receiveWindowClosed && (socket.getReceiveWindow() != 0)){
      //receive window was closed, but we've made enough space (see above)
      //-> send gratuitous ACK ('window update')
      socket.sendACK();
      //TODO: only triggerACK() ? --> but NO delayed ACK!
    }
  }
  
};
