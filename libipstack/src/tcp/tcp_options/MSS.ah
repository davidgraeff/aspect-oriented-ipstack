// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert


#ifndef __TCP_OPTION_MSS_AH__
#define __TCP_OPTION_MSS_AH__

#include "util/ipstack_inttypes.h"
#include "../TCP_Socket.h"
#include "../TCP_Segment.h"
#include "MSS_TCP_Segment_Slice.ah"
#include "MSS_TCP_Socket_Slice.ah"

using namespace ipstack;

aspect TCP_Option_MSS {

	enum { MSS_OPTION_BYTES = 4U }; //16 bit MSS option support

	// *** Affect class: TCP_Segment
advice "ipstack::TCP_Segment" : slice MSS_TCP_Segment_Slice;

	// *** Affect class: TCP_Socket
advice "ipstack::TCP_Socket" : slice MSS_TCP_Socket_Slice;

	advice construction("ipstack::TCP_Socket") && that(socket) : after(TCP_Socket& socket) {
		socket.recalculate_mss();
	}

	/**
	 * An MTU changed method is called (by the auto mtu algorithm or by network interfaces)
	 * if the MTU of any interface changes. Just recalculate our current mss.
	 * This is only used by a new open connection, because the mss option is only allowed in
	 * SYN packets.
	 */
	advice execution("void ipstack::MTU_changed(unsigned)") && args(mtu) && that(socket) :
		after(unsigned mtu, TCP_Socket& socket) {
		socket.recalculate_mss();
	}

	//match all join-points where we create a SYN packet:
//   pointcut SYN_create() = "% ipstack::TCP_Socket::connect()" ||
//                           "% ipstack::TCP_Socket::listen(ipstack::TCP_Segment*, unsigned)";
//
	//  within(SYN_create())

	advice call("% ipstack::TCP_Socket::requestSendBufferTCP_syn(%)") && args(payloadsize) : before(uint_fast16_t payloadsize) {
		//alloc additional bytes for the MSS option
		*(tjp->arg<0>()) += MSS_OPTION_BYTES;
	}

	// Warning: This only works if the tcp header is written before setting the
	// SYN flag because set_option_mss relies on a already known getHeaderLength()
	advice call("void ipstack::TCP_Segment::set_SYN()") && that(socket) &&	target(segment) :
		after(TCP_Socket& socket, TCP_Segment& segment) {
		//add mss option to tcp header
		segment.set_option_mss(socket.mss);
		
		// Dirty hack to get the original sendbuffer
		SendBuffer* b = (SendBuffer*)(((char*)&segment) - sizeof(SendBuffer));
		// advance SendBuffer data pointer to prevent payload data to overwrite the MSS option data.
		// Although it is not usual to send payload with the SYN packet, it is theoretically possible
		// (see TCP fast open)
		b->writtenToDataPointer(MSS_OPTION_BYTES);
	}

	//match all join-points where we free a received SYN packet
	pointcut SYN_free() = "% ipstack::TCP_Socket::listen(ipstack::TCP_Segment*, unsigned)" ||
						  "% ipstack::TCP_Socket::synsent%(ipstack::TCP_Segment* , unsigned)";


	advice call("void ipstack::TCP_Socket::freeReceivedSegment(TCP_Segment*)") &&
	within(SYN_free()) &&
	that(socket) &&
	args(segment) :
		before(TCP_Socket& socket, TCP_Segment* segment) {

		// Compare received MSS with our 'mss' (MTU - headers) and choose the smaller one
		// The smaller one guarantees that we have enough memory to receive a tcp packet
		// of the remote and that it fits into our mtu size.

		if (segment->has_SYN()) {
			//only SYN packets can carry the mss option
			uint16_t recv_mss = segment->get_option_mss();

			if ((recv_mss != 0) && (recv_mss < socket.mss)) {
				socket.setMSS(recv_mss); //use remote mss (smaller than ours)
			}
		}
	}


};

#endif // __TCP_OPTION_MSS_AH__

