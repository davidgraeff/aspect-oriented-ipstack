// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __TCP_OPTION_MSS_TCP_SEGMENT_SLICE__
#define __TCP_OPTION_MSS_TCP_SEGMENT_SLICE__
#include <inttypes.h>
//#include "TCP_RecvElement.h"
//using namespace ipstack;

slice class MSS_TCP_Segment_Slice {
  
  void set_option_mss(uint16_t mss){
    unsigned i = get_options_len(); //append to existing options
    data[i+0] = 2; // kind
    data[i+1] = 4; // length
    uint16_t* d = (uint16_t*)&data[i+2];
    *d = mss; //16bit mss value
    set_header_len(get_header_len() + 1U);
  }
  
  uint16_t get_option_mss(){
    //returns the MSS value of this segment (if that tcp option is set)
    unsigned opt_len = get_options_len();
    unsigned i=0;
    while(i < opt_len){
      uint8_t& kind = data[i];
      uint8_t& len = data[i+1]; //sum of (kind + len + options)
      switch(kind){
        case 0: return 0; //end of options list
        case 1: i++; break; //nop
		case 2: if(len >= 4){ uint16_t* d = (uint16_t*)&data[i+2]; return *d; } //16 bit MSS
                else{ return data[i+2]; } //only 8 bit MSS :-(
        default: i+=len; break;
      }
    }
    return 0;
  }
  
};

#endif // __TCP_OPTION_MSS_TCP_SEGMENT_SLICE__

