// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "TCP.h"
#include "Demux_TCP_Listen_Slice.ah"
#include "../demux/Demux.h"
#include "../router/Interface.h"
#include "ReceiveBuffer.h"

using namespace ipstack;

aspect TCP_Listen_aspect {
	// *** Affect class: Demux
advice "ipstack::Demux" : slice Demux_TCP_Listen_Slice;

	advice execution("bool ipstack::TCP_Socket::listen()") && that(socket) :
		around(TCP_Socket& socket) {
		while (socket.isEstablished() == false) {
			if (Demux::Inst().listen(&socket) == false) { //add listen-socket to Demux
				*(tjp->result()) = false;
				return;
			}
			tjp->proceed();

// 			printf("TCP_Socket::listen() wait syn 2\n");
			//Wait for SYN packet
			while (socket.isListening()) {
				ReceiveBuffer* receiveB = (ReceiveBuffer*)socket.packetbuffer->get();
				if (receiveB == 0) {
					socket.input(0, 0);
				} else {
					TCP_Segment* segment = (TCP_Segment*)receiveB->getData();
					socket.set_dport(segment->get_sport()); //set dport to remote's sport
					//bind this socket at Demux to ipv4 addresses and tcp ports
					if (socket.bind() == false) {
						//this connection (ipv4 addresses, tcp ports) is already used
						ReceiveBuffer::free(receiveB);
						Demux::Inst().listen(&socket); //listen for next SYN packet (at Demux)
					} else {
						socket.input(segment, receiveB->getSize()); //deliver SYN packet
					}
				}
			}
			socket.recv_loop();
			if (socket.isEstablished() == false) {
				socket.unbind(); //remove connection at Demux
			}
		}
		//return if connection is established
		*(tjp->result()) = true;
	}
};

