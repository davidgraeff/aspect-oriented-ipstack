// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __TCP_RECEIVE_BUFFER_SLIDING_WINDOW_AH__
#define __TCP_RECEIVE_BUFFER_SLIDING_WINDOW_AH__

#include "TCP_ReceiveBuffer.h"
#include "TCP_RecvElement.h"
#include "../TCP.h"

#include "TCP_ReceiveBuffer_SlidingWindow_Slice.ah"
#include "TCP_RecvElement_SlidingWindow_Slice.ah"

using namespace ipstack;


aspect TCP_ReceiveBuffer_SlidingWindow {
  
  // *** Affect class: TCP_ReceiveBuffer
  advice "ipstack::TCP_ReceiveBuffer" : slice TCP_ReceiveBuffer_SlidingWindow_Slice;
  
  advice construction("ipstack::TCP_ReceiveBuffer") &&
         that(receiveBuffer) :
         before(TCP_ReceiveBuffer& receiveBuffer) {
  
    receiveBuffer.freelist = &receiveBuffer.elements[0];
    receiveBuffer.recv_continuous = 0;
    receiveBuffer.recv_bytes = 0;
    
    for(unsigned i=0; i<(sizeof(receiveBuffer.elements)/sizeof(TCP_RecvElement))-1; i++){
      receiveBuffer.elements[i].setNext(&receiveBuffer.elements[i+1]);
    }
    receiveBuffer.elements[(sizeof(receiveBuffer.elements)/sizeof(TCP_RecvElement))-1].setNext(0);
  }
  
  advice execution("% ipstack::TCP_ReceiveBuffer::getAckNum()") &&
         that(receiveBuffer) :
         around(TCP_ReceiveBuffer& receiveBuffer) {
    
    if(receiveBuffer.recv_continuous == 0){
      *tjp->result() = receiveBuffer.read_firstSeqNum;
      return;
    }
    else{
      *tjp->result() = receiveBuffer.recv_continuous->getNextSeqNum();
      return;
    }
  }
  
  advice execution("unsigned ipstack::TCP_ReceiveBuffer::getRecvBytes()") &&
         that(receiveBuffer) :
         around(TCP_ReceiveBuffer& receiveBuffer) {
    *tjp->result() = receiveBuffer.recv_bytes;
  }
  
  advice execution("void ipstack::TCP_ReceiveBuffer::copyData(void*, unsigned)") &&
         that(receiveBuffer) &&
         args(dst, len) :
         around(TCP_ReceiveBuffer& receiveBuffer, void* dst, unsigned len) {
    receiveBuffer.copyData_SlindingWindow(dst, len);
  }

  advice execution("bool ipstack::TCP_ReceiveBuffer::insert(ipstack::TCP_Segment*, %, unsigned)") &&
         that(receiveBuffer) &&
         args(segment, seqnum, len) :
         around(TCP_ReceiveBuffer& receiveBuffer, TCP_Segment* segment, UInt32 seqnum, unsigned len) {
    *tjp->result() = receiveBuffer.insert_SlidingWindow(segment, seqnum, len);
  }
  
  
  // *** Affect class: TCP_RecvElement
  advice "ipstack::TCP_RecvElement" : slice TCP_RecvElement_SlidingWindow_Slice;

};

#endif // __TCP_RECEIVE_BUFFER_SLIDING_WINDOW_AH__

