// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __TCP_RTT_ESTIMATION_AH__
#define __TCP_RTT_ESTIMATION_AH__

#include <inttypes.h>
#include "../TCP_Socket.h"
#include "../TCP.h"
#include "RTT_Estimation_Slice.ah"

using namespace ipstack;


aspect TCP_RTT_Estimation {
  
  // *** Affect class: TCP_Socket
  advice "ipstack::TCP_Socket" : slice TCP_RTT_Estimation_Slice;
  
  advice call("% ipstack::TCP_Socket::send(...)") &&
         within("bool ipstack::TCP_Socket::sendNextSegment()") &&
         that(socket) :
         before(TCP_Socket& socket) {

    //start a new rtt estimation if possible
    socket.start_RTT_Estimation();
  }
  
  advice execution("void ipstack::TCP_Socket::set_seqnum_unacked(%)") &&
         args(acknum) &&
         that(socket) :
         after(uint32_t acknum, TCP_Socket& socket){

    //check if this ACK has finished our rtt estimation
    socket.update_RTT_Estimation(acknum);
  }
  
  advice execution("void ipstack::TCP_Socket::setRetransmitting()") &&
         that(socket) :
         before(TCP_Socket& socket){

    //abort any running rtt estimation if a retransmission occures
    //this is called 'Karn's Algorithm'
    socket.abort_RTT_Estimation();
  }
  
  advice execution("void ipstack::TCP_Socket::gen_initial_seqnum()") &&
         that(socket) :
         after(TCP_Socket& socket){

    //initialize RTT values to defaults
    socket.rtt_init();        
  }
  
  advice execution("% ipstack::TCP_Socket::getRTO()") &&
         that(socket) :
         around(TCP_Socket& socket) {

    //use estimated RTO:
    *tjp->result() = socket.rto;
  }
  
};

#endif // __TCP_RTT_ESTIMATION_AH__

