// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __TCP_RTT_ESTIMATION_SLICE__
#define __TCP_RTT_ESTIMATION_SLICE__

#include "util/ipstack_inttypes.h"
#include "operating_system_integration/Clock.h"

slice class TCP_RTT_Estimation_Slice {
  private:
  enum { LOWER_RTO_BOUND = 200U }; //Linux uses 200ms min RTO (rfc 2988: min 1sec)
  
  uint32_t rtt_seqnum; //the sequence number for current measuring
  uint64_t rrt_time; //when was 'rtt_seqnum' send
  bool rrt_active; //there is maesure going on
  
  int32_t srtt; //the smoothed RTT (scaled X 8)
  int32_t rtt_var; // variation (mean deviation) of RTT (scaled X 4)
  uint32_t rto; //retransmission timeout
  
  void update_SRTT(int32_t meassured_rtt){
    //see "Internetworking with TCP/IP Volume II, page 278"
    //for further explainations
    if(srtt == 0){
      //this is the first RTT meassure, see RFC 2988 page 2:
      srtt = meassured_rtt<<3; //srtt = "meassured_rtt"
      rtt_var = meassured_rtt<<1; // rtt_var = "meassured_rtt/2"
      rto = meassured_rtt + (rtt_var<<1); // RTO := SRTT + 4*deviation(SRTT)
      return;
    }
    
    int32_t error = meassured_rtt - (srtt >> 3);
    srtt += error; // srtt = srtt + error/8
    
    if(error < 0){
      error = -error;
    }
    rtt_var += error - (rtt_var >> 2); // rtt_var = rtt_var + (err - rtt_var)/4
    
    rto = (srtt>>3) + rtt_var; // RTO := SRTT + 4*deviation(SRTT)
  }
  
  void rtt_init(){
    rrt_active = false;
    srtt = 0;
    rtt_var = 3000; //see "TCP/IP Illustrated Vol.1, page 305"
    rto = 6000; //6 seconds (see above)
  }
  
  void start_RTT_Estimation(){
    if(rrt_active == false){
      rrt_active = true;
      rtt_seqnum = seqnum_next;
      rrt_time = Clock::now();
    }
  }
  
  void abort_RTT_Estimation(){
    rrt_active = false;
  }
  
  void update_RTT_Estimation(uint32_t acknum){
    if(rrt_active == true){
      if(TCP_Segment::SEQ_LT(rtt_seqnum, acknum)){
        //rtt_seqnum is ack'ed now
        uint32_t meassured_rtt = Clock::ticks_to_ms(Clock::now() - rrt_time); //in milliseconds
        
        //crazy cast :-)
        int32_t msec = (int32_t) (((uint32_t) meassured_rtt) & 0x7FFFFFFFUL);
        update_SRTT(msec);
        if(rto < LOWER_RTO_BOUND){
          rto = LOWER_RTO_BOUND;
        }
        rrt_active = false;
      }
    }
  }
  
};

#endif // __TCP_RTT_ESTIMATION_SLICE__
