// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2013 David GrÃ¤ff

#pragma once

#include "ipstack/router/Interface.h"
#include "ipstack/SendBuffer.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/ipv6/IPv6AddressUtilities.h"
#include "ipstack/ipv6/AddressMemory.h"
#include "util/types.h"

using namespace ipstack;

/**
  * Print debug messages for all ndp lookup related functionallity.
  */
aspect NDPLookupDebug {
	bool lookup;

	advice execution( "void os::init()" ) : after() {
		lookup = 0;
	}
	
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv%", "NDPLookupDebug", "IPv6_Ethernet_NDPCache_Blocking_Aspect");
	
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") && args(sendbuffer) :
		around(SendBuffer* sendbuffer) {
		
			// check ip version
		if (tjp->that()->m_useipversion == 6 && (sendbuffer->getState() & SendBuffer::ResolveLinkLayerStateOption)) {
			IPv6_Packet* ip = (IPv6_Packet*)sendbuffer->memstart_ip;
			
			lookup = 1;
			char tempbuf[50] = {0};
			ipstack::ipv6_addr_toString(ip->get_dst_ipaddr(), tempbuf);
			printf("NDP Lookup: For IP %s. Wait...\n", tempbuf);
		}
		tjp->proceed();
	}
	
	advice execution("% ipstack::Interface::block_until_neighbor_advertisement(...)") && args(entry) && that(interface) :
		after(NDPCacheEntry* entry, Interface& interface) {
		
		lookup = 0;
 		printf("NDP Lookup: Lookup result %u\n", interface.is_NDPCacheEntry_reachable(entry));
	}
	
	/**
	  * addNDPCacheEntry is also called by the ndp neighbor advertisement message to update
	  * the entry. If addNDPCacheEntry is called while we are in lookup mode, we will therefore log that.
	  */
	advice execution("% ipstack::Interface::addNDPCacheEntry(...)") && that(interface) :
		after(Interface& interface) {
		
		// only print out messages if we are in a lookup at the moment
		if ( lookup == 0 )
			return;
		
		NDPCacheEntry* entry = *tjp->result();
		if (!entry) {
			printf("NDP Lookup: Received address, but entry not found!\n");
			return;
		}
		
		char tempbuf[50] = {0};
		ipstack::ipv6_addr_toString(entry->ipv6, tempbuf);
		printf("NDP Lookup: Received address. IPv6 is %s\n", tempbuf);
	}
};
