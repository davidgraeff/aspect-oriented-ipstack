// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "ipv6/IPv6_Packet.h"
#include "ipv6/IPv6.h"
#include "router/sendbuffer/SendBuffer.h"
#include "IPv6HopByHop.h"
#include "util/ipstack_inttypes.h"

using namespace ipstack;

/**
 * Set the IPv6 header extension: HopByHop
 */
aspect Sendbuffer_IPv6_HopByHop_extension {
	advice execution("% ipstack::SendBufferIP::requestIPBuffer(ipstack::SocketMemory&, ipstack::IP&, %, ipstack::ReceiveBuffer*)") && args(mem, ip, requestedSize, use_as_response) :
		before(SocketMemory& mem, IP& ip, uint_fast16_t requestedSize, ReceiveBuffer* use_as_response) {
		// check ip version
		if (ip.m_useipversion == IPV6_VERSION) {
			*tjp->arg<2>() = requestedSize + IPv6HopByHop::getSize(ip.ipv6);
		}
	}

	// Always first add the IPv6 header and after that the Extension headers.
	// All upper layer protocols should be the last ones effecting these funtions.
	advice execution("void ipstack::SendbufferIP::prepareSendBuffer(...)") : order("Sendbuffer_IPv6" , "Sendbuffer_IPv6_HopByHop_extension");

	advice execution("void ipstack::SendbufferIP::prepareSendBuffer(...)") && args(sendbuffer, ip, use_as_response) :
		around(SendBuffer* sendbuffer, IP& ip, ReceiveBuffer* use_as_response) {

		// check ip version
		if (ip.m_useipversion == 6) {
			IPV6& ipv6 = ip.ipv6;
			char* nextHeader = (char*)sendbuffer->getDataPointer(); // the next header field is always the first byte of an IPv6 extension header.
			uint_fast16_t size = IPv6HopByHop::writeExtensionHeader(ipv6, nextHeader);

			if (!size) {
				tjp->proceed();
				return;
			}
			sendbuffer->writtenToDataPointer(size);
			// set next header of ipv6
			*(sendbuffer->p.nextheaderfield_ip) = IPv6HopByHop::IPV6_NEXTHEADER_HOPBYHOP;
			
			// change next header pointer to point to the nextheader field of this extension.
			sendbuffer->p.nextheaderfield_ip = nextHeader;
		}
		tjp->proceed();
	}
};
