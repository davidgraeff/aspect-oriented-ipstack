// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David Gr√§ff

#pragma once
/**
 * Purspose: add the possiblity to add/remove ipv6instances to the global demux object in a linked list . This
 * will introduce a head pointer for a linked list for added ipv6instances.
 * We are now able to iterate all ipv6 enabled sockets.
 * This is necessary for the destination cache which binds a ndp cache entry to the ipv6instance of a socket.
 * If the entry expires, it is removed from all affected sockets with ipv6 enabled.
 */

#include "../IPv6onSockets.h"
#include "../ndpcache/NDPCacheEntry.h"
#include <inttypes.h>
using namespace ipstack;

slice class Router_IPv6_DEST_CACHE_Slice
{
	private:
		IPV6* ipv6_head;
	public:
		IPV6* getFirstDestinationCacheEntry() {
			return ipv6_head;
		}
		
		/**
		 * Clear all destination cache entries that are set to the given "entry".
		 * If "entry" is 0, just clear all destination cache entries.
		 */
		void clearDestinationCacheEntry(NDPCacheEntry* entry = 0) {
			IPV6* ipv6instance = ipv6_head;
			while (ipv6instance) {
				if (!entry || ipv6instance->nexthop_ndpcache_entry == entry) {
					ipv6instance->nexthop_ndpcache_entry = 0;
				}
				ipv6instance = ipv6instance->getNext();
			}
		}
		void setupDestinationCacheEntryForInterface(Interface* interface) {
			IPV6* ipv6instance = ipv6_head;
			while (ipv6instance) {
				if (ipv6instance->interface == interface) {
					// We may get a new src ip here. But because all connections should have been either shutdown by the setIPv6Up(false) call
					// or aren't established at all (fresh setIPv6Up(true) call) this is ok.
					ipv6instance->resolveRoute();
				}
				ipv6instance = ipv6instance->getNext();
			}
		}
		
		bool addToDestinationCache(IPV6* ipv6instance) {
			IPV6* current = ipv6_head;
			while (current != 0) {
				if (current == ipv6instance) {
					//error already added
					return false;
				}
				current = current->getNext();
			}
			//insert at front
			ipv6instance->setNext(ipv6_head);
			ipv6_head = ipv6instance;
			return true;
		}

		void removeFromDestinationCache(IPV6* ipv6instance) {
			if (ipv6instance == ipv6_head) {
				ipv6_head = ipv6instance->getNext();
			} else {
				IPV6* current = ipv6_head;
				IPV6* next = current->getNext();
				while (next != 0) {
					if (next == ipv6instance) {
						current->setNext(next->getNext());
						return;
					}
					current = next;
					next = current->getNext();
				}
			}
		}
};
