// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2013 David GrÃ¤ff

/**
 * Debug messages related to the destination cache
 */
#pragma once

#include "Router_Destination_Cache_Slice.ah"
#include "IPV6_Destination_Cache_Slice.ah"
#include "../IPv6onSockets.h"
#include "router/Router.h"
#include "router/Interface.h"

using namespace ipstack;

aspect Router_Destination_Cache_aspect_debug {

	/**
	  * Return on-link destination ip instead of just the user-set dest ip
	  */
	advice execution("% ipstack::IPV6::get_nexthop_ipaddr()") && that(ipv6) : around() {
		NDPCacheEntry* entry =  ipv6.get_nexthop_ndpcache_entry();
		if (!entry) {
			printf("DestCache: No destcache entry. Link local dest ip?\n");
		} else {
			printf("DestCache: Use dest cache entry as next-hop ip\n");
		}
		tjp->proceed();
	}


	advice execution("% ipstack::IPV6::resolveRoute(...)") :
		order("Router_Destination_Cache_aspect_debug" , "Router_Destination_Cache_aspect");

	/**
	 * Update destination cache:
	 * -------------------------
	 * A destination cache entry is usually updated by the link layer (ethernet) aspect.
	 * But if we know the router entry of the ndp-cache already, we can use it.
	 */
	advice execution("% ipstack::IPV6::resolveRoute(...)") && that(ipv6) : after(IPV6& ipv6) {
		AddressEntry* entry = *(tjp->result());
		
		if (!ipv6.interface || !entry)
			return;
		
		// if we have an on-link address: do nothing
		if (IPV6AddressScope::getIPv6AddressScope(entry->ipv6) == IPV6AddressScope::IPV6_SCOPE_LINKLOCAL) {
			printf("DestCache: Link-local address as dest. Nothing to do.\n");
			return;
		}
		
		// We will now look at that entry, if there is a router connected to it.
		if (entry->routerEntryPosition == AddressMemory::EntryUndefined) {
			printf("DestCache: No router entry found for dest ip!\n");
			return;
		}

		// Yes there is a router connected to this entry. Use the routers ip as next hop.
		NDPCacheEntry* ndpentry = (NDPCacheEntry*)ipv6.interface->addressmemory.getEntryAtPosition(entry->routerEntryPosition);
		printf("DestCache: Router entry as next-hop ip %p!\n", ndpentry);
	}
};
