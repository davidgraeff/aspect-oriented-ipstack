// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "udp/UDP.h"
#include "../IPv6.h"
#include "router/Interface.h"
#include "demux/Demux.h"
#include "../InternetChecksum.h"

using namespace ipstack;

aspect IPv6_UDP_Rx_Checksumming {
	// advice ordering: always execute this aspect first!
	advice execution("% ipstack::Demux::ipv6_payload_demux(...)") :
	order("IPv6_UDP_Rx_Checksumming", "IPv6_UDP_Receive");
	
	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") &&
	args(interface, packet, payload, payload_length, nextHeader) && that(demux) :
	around(Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader, Demux& demux) {
		
		if (nextHeader != UDP_Packet::IP_TYPE_UDP) {
			tjp->proceed();
			return;
		}

		UDP_Packet* udp = (UDP_Packet*) payload;

		if (udp->get_checksum() != 0) {
			//this packet is protected by an internet checksum
			if (!udp->checksum_valid(InternetChecksumV6::computePseudoHeader(packet, payload_length, UDP_Packet::IP_TYPE_UDP), payload_length, interface)) {
//  				printf("checksum udp wrong; packet len %lu\n", payload_length);
				// checksum wrong: drop entire packet
				*(tjp->result()) = true; 
				return;
			}
		}
		
		tjp->proceed();
	}
};
