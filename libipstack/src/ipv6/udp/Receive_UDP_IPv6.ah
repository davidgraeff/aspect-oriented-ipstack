// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David Gr√§ff

#pragma once

#include "udp/UDP.h"
#include "udp/UDP_Socket.h"
#include "demux/Demux.h"
#include "router/Interface.h"
#include "../IPv6.h"
#include "ReceiveBufferUDPIPv6.h"
#include "Demux_UDP_IPv6_Slice.ah"
#include <inttypes.h>

using namespace ipstack;

aspect IPv6_UDP_Receive {

	// Interceptable error messages
advice "ipstack::Demux" : slice Demux_UDP_IPv6_Slice;

	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") &&
	args(interface, packet, payload, payload_length, nextHeader) && that(demux) :
		around(Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader, Demux& demux) {

		if (nextHeader != UDP_Packet::IP_TYPE_UDP) {
			tjp->proceed();
			return;
		}

		//we have an udp packet
		*(tjp->result()) = true;
			
		if (payload_length < UDP_Packet::UDP_HEADER_SIZE) {
			return; //len too small! Drop packet
		}

		UDP_Packet* udp_packet = (UDP_Packet*) payload;

		uint16_t udp_packet_dport = udp_packet->get_dport();

		UDP_Socket* socket = demux.udp_head_socket;
		while (socket != 0) {
			if (socket->get_sport() == udp_packet_dport) {
				// copy the payload out of the udp socket
				ReceiveBufferUDPIPv6* r = ReceiveBufferUDPIPv6::createReceiveBufferUDPIPv6(socket->get_Mempool(),
										  udp_packet->get_data(), udp_packet->get_length() - UDP_Packet::UDP_HEADER_SIZE, udp_packet->get_sport(),
										  packet->get_src_ipaddr());
				if (!r) {
					demux.error_receiving_memory_too_small_v6(packet, interface);
				}
				if (!socket->addToReceiveQueue(r)) {
					demux.error_receiving_queue_full_v6(packet, interface);
				}
				return; // dport match found
			}
			socket = socket->getNext(); //try next socket
		}

		demux.error_port_not_reachable_v6(packet, interface);
	}
};
