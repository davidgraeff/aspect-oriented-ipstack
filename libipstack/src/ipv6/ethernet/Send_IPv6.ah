// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012-2013 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "ethernet/Eth_Frame.h"
#include "sending/SendBuffer.h"
#include "ipv6/IPv6_Packet.h"
#include "ipv6/IPv6onSockets.h"
#include "util/ipstack_inttypes.h"

using namespace ipstack;

/**
 * Fill the ethernet header within prepareSendBuffer(...) and call a
 * ipv6->ethernet-mac lookup method if the destination is not a broadcast mac.
 */
aspect Sendbuffer_IPv6_Ethernet {
	// call-advice ordering: always add the ethernet header before the IPv6 header!
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") :
		order("Sendbuffer_IPv6_Ethernet" , "Sendbuffer_IPv6");

	// add ethernet header to the SendBuffer. This method is only called with a valid
	// SendBuffer -> no runtime checks.
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") && args(sendbuffer)  :
		around(SendBuffer* sendbuffer) {

		// only for IPv6
		if (tjp->that()->m_useipversion != 6) {
			tjp->proceed();
			return;
		}
		
		IPV6& ipv6 = tjp->that()->ipv6;
		Interface* interface = ipv6.interface;
		if (interface->getType() != Interface::ETHERNET) {
			tjp->proceed();
			return;
		}

		//we have an ethernet device
		Eth_Frame* eth_frame = (Eth_Frame*)(sendbuffer->getDataPointer());
		sendbuffer->memstart_ethernet = eth_frame;
		sendbuffer->writtenToDataPointer(Eth_Frame::ETH_HEADER_SIZE);
		
		ipv6addr nexthopAddr = ipv6.get_nexthop_ipaddr();

		eth_frame->set_type(IPv6_Packet::ETH_TYPE_IPV6);
		eth_frame->set_src_hwaddr(interface->getAddress());

		// If this is a multicast ip address, use the broadcast mac
		if (IPV6AddressScope::getIPv6AddressScope(nexthopAddr) == ipstack::IPV6AddressScope::IPV6_SCOPE_MULTICAST) {
			// multicast mac is 33-33-00-00-00-00 filled with the last 4 bytes of the ip address.
			const uint8_t multicastmac[6] = {0x33, 0x33, nexthopAddr.ipaddrB8[12], nexthopAddr.ipaddrB8[13], nexthopAddr.ipaddrB8[14], nexthopAddr.ipaddrB8[15]};
			eth_frame->set_dst_hwaddr(multicastmac);
		} else {
			sendbuffer->setState(SendBuffer::WritingState | SendBuffer::ResolveLinkLayerStateOption);
		}

		tjp->proceed();
	}
};
