// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2012-2013 David GrÃ¤ff

#pragma once

#include "router/Interface.h"
#include "Interface_Expire_Slice.ah"
#include "NDPCacheEntry_Expire_Slice.ah"
#include "NDPCacheExpireConfig.h"
using namespace ipstack;

aspect IPv6NDPCacheExpire_aspect {
	/* Affect class: Interface */
	advice "ipstack::Interface" : slice Interface_NDPCacheExpire_Slice;
	/* Affect class: NDPCacheEntry */
	advice "ipstack::NDPCacheEntry" : slice NDPCacheEntry_Expire_Slice;

	/**
	  * If an entry is looked for -> it is used. Mark the coresponding entry as used
	  * to avoid expiring.
	  */
	advice execution("void ipstack::Interface::ndpcache_find(%)") && that(interface) :
		after(Interface& interface) {
			
		NDPCacheEntry* entry = *tjp->result();
		if (entry)
			interface.ipv6_useentry(entry);
	}
			
	/**
	  * Set a strategy for dropUnused
	  */
	advice execution("void ipstack::Interface::dropUnused()") && args() && that(interface) :
		around(Interface& interface) {
			
		interface.releaseEntryBelowImportance(NDPCacheEntry::IMPORTANCE_good_to_know);
	}
	
	/**
	  * Set a strategy for confirmed entries
	  */
	advice execution("void ipstack::Interface::entryConfirmed(ipstack::NDPCacheEntry*)") && args(entry) && that(interface) :
		around(NDPCacheEntry* entry, Interface& interface) {
			
		if (entry->isRouter) {
			interface.update_NDPCacheEntry_importance(entry, NDPCacheEntry::IMPORTANCE_router);
		} else {
			interface.update_NDPCacheEntry_importance(entry, NDPCacheEntry::IMPORTANCE_solicitation_renew);
		}
	}
	
	/**
	  * As soon as a new NDPCacheEntry is created: Set the expire_value to a decent default value.
	  */
	advice execution("void ipstack::Interface::reserveNDPCacheEntry(ipstack::NDPCacheEntry*)") && args(entry) && that(interface) :
		before(NDPCacheEntry* entry, Interface& interface) {
		// Default for new Entries: This entry will expire within 2 refresh cycles.
		// Use update_NDPCacheEntry_importance() if you want to manually change the expire value.
		// This is usually done by neighbour advertisement message of remote hosts
		entry->expire_value = NDPCACHE_TRESHOLD_REQUIRE_SOLICITATION + NDPCACHE_EXPIRE_RATE_PER_MINUTE;
	}
};
