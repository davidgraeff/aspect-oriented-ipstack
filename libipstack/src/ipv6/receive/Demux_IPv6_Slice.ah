// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "ipv6/IPv6_Packet.h"
#include "router/Interface.h"

using namespace ipstack;

slice class Demux_IPv6_Slice {
private:
	void ipv6_demux(ReceiveBuffer& buffer){
		//is the receiving interface running ipv6?
		Interface* interface = buffer.get_interface();
		if (interface->isIPv6Up() == false) {
			//discard packets on down interfaces
			return;
		}

		IPv6_Packet* packet = (IPv6_Packet*)buffer.get_payload_data();

		if (packet->get_version() != IPv6_Packet::IPV6_VERSION) {
			//no ipv6 packet
			return;
		}

		unsigned len = packet->validPacketLength(packet->get_payload_len());
		if (len == 0) {
			//invalid packet length
			return;
		}
		
		// Is the dest address assigned to our interface?
		if (!interface->hasIPv6Address(packet->get_dst_ipaddr())) {
			//this packet has to be routed elsewhere
			return;
		}
		
        // Go through all linked next headers
        unsigned char nextHeader = packet->get_nextheader();

		// Advance ReceiveBuffer "payload" data pointer
		buffer.setPayload(packet->get_payload(), len-IPv6_Packet::IPV6_HEADER_SIZE_IN_BYTES);
		
		if (nextHeader == IPv6Ext_HopyByHop) {
			nextHeader = ipv6_ext_HopyByHop(buffer);
		}
		
		if (nextHeader == IPv6Ext_DestOptions) {
			nextHeader = ipv6_ext_DestOptions(buffer);
		}
		
		if (nextHeader == IPv6Ext_Routing) {
			nextHeader = ipv6_ext_Routing(buffer);
		}
		
		if (nextHeader == IPv6Ext_Fragment) {
			nextHeader = ipv6_ext_Fragment(buffer);
		}
		
		if (nextHeader == IPv6Ext_Authentification) {
			nextHeader = ipv6_ext_Authentification(buffer);
		}
		
		if (nextHeader == IPv6Ext_ESP) {
			nextHeader = ipv6_ext_ESP(buffer);
		}
		
		if (nextHeader == IPv6Ext_DestOptions) {
			nextHeader = ipv6_ext_DestOptions(buffer);
		}
		
		if (nextHeader == IPv6Ext_Mobility) {
			nextHeader = ipv6_ext_Mobility(buffer);
		}
		
		// Nothing to do, no other payload
		if (nextHeader == IPv6Ext_NoNext) {
			return;
		}
		
		// If extension header parsing didn't fail, propagate to ip_payload_demux
		if (ip_payload_demux(buffer, nextHeader))
			return;

		error_no_protocol_handler_v6(buffer);
    }

	inline unsigned char ipv6_ext_HopyByHop(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	inline unsigned char ipv6_ext_DestOptions(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	inline unsigned char ipv6_ext_Routing(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	inline unsigned char ipv6_ext_Fragment(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	inline unsigned char ipv6_ext_Authentification(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	inline unsigned char ipv6_ext_ESP(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	inline unsigned char ipv6_ext_Mobility(ReceiveBuffer& buffer){
		return ExtensionHeaderOptions::skipHeader(buffer);
	}
	
    /**
	 * Call this method if the ipv6 ttl is 0
	 */
	void error_ttl_v6(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}
	
	/**
	 * Call this method if there is no protocol handler for the given protocol
	 */
	void error_no_protocol_handler_v6(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}
	
	/**
	 * Call this method if there is an unknown option
	 */
	void error_option_unknown_v6(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}
	
	/**
	 * Call this if the receiving queue is full
	 */
	void error_receiving_queue_full_v6(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}
	/**
	 * Call this if the received packet does not fit into one of the available memory blocks
	 */
	void error_receiving_memory_too_small_v6(ReceiveBuffer& buffer) {
		//Aspects to be weaved here!
	}
};
