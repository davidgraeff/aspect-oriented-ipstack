// This file is part of Aspect-Oriented-IP.
//
// Aspect-Oriented-IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aspect-Oriented-IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aspect-Oriented-IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "util/ipstack_inttypes.h"
#include "ipv6/AddressMemory.h"
#include "ipv6/IPv6_Packet.h"
#include "ipv6/IPv6.h"
#include "router/Interface.h"
#include "Address_prefix_expire_Slice.ah"
#include "Interface_prefix_expire_Slice.ah"

using namespace ipstack;

aspect Address_prefix_expire_aspect {
	advice "ipstack::AddressEntryIPv6" :
	slice Address_prefix_expire_Slice;

	advice execution("bool ipstack::Router::ipv6_find_route_is_matching(%, ipstack::AddressEntryIPv6*)") && args(entry) :
		around(AddressEntryIPv6* entry) {
		if (!entry->preferred_time_minutes) {
			*(tjp->result()) = false;
			return;
		}
		tjp->proceed();
	}

	advice execution("ipstack::AddressEntryIPv6* ipstack::Interface::addAddress(...)") && result(entry) :
		after(AddressEntryIPv6* entry) {
		if (entry) {
			entry->valid_time_minutes = AddressEntryIPv6::NoTimeExpire;
			entry->preferred_time_minutes = AddressEntryIPv6::NoTimeExpire;
		}
	}
	
	/**
	 * TODO
	 * Reset link to AddressEntryIPv6 on all ipv6 sockets
	 * Depends on: IP_in_linked_list feature for IP_Socket iteration
	 */
	advice execution("void ipstack::Interface::freeAddress(ipstack::NeighbourEntry*, %)") && args(entry, position) :
		around(NeighbourEntry* entry, EntryPosition position) {
			
		IP* ipsocket = IP::getHead();
		while (ipsocket) {
			if (compare_ipv6_addr(ipsocket->ipv6.get_dst_addr(), entry->ipv6)) {
				ipsocket->resetRoute();
			}
			ipsocket = ipsocket->getNext();
		}
	}
	
	// This may be used by the ndp address unreachable detection
	// Call this method every IPV6_REFRESH_IN_MINUTES
	advice execution("void ipstack::System::periodic()") {
		uint8_t nextEntry = 0;
		while (AddressEntryIPv6* entry = getAddress(&nextEntry)) {
			if (entry->valid_time_minutes==(uint32_t)AddressEntryIPv6::NoTimeExpire)
				continue;
			
			if (entry->valid_time_minutes <= (uint32_t)IPV6_REFRESH_IN_MINUTES) {
				freeAddress(entry);
				continue;
			}
			
			entry->valid_time_minutes -= IPV6_REFRESH_IN_MINUTES;
			if (entry->preferred_time_minutes <= IPV6_REFRESH_IN_MINUTES)
				entry->preferred_time_minutes = 0;
			else
				entry->preferred_time_minutes -= IPV6_REFRESH_IN_MINUTES;
		}
	}
	enum {IPV6_REFRESH_IN_MINUTES = 3};
};
