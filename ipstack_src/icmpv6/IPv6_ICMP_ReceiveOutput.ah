// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "ipstack/ipv6/IPv6.h"
#include "../ipv6/InternetChecksum.h"
#include "ipstack/demux/Demux.h"
#include "ipstack/router/Interface.h"
#include "ICMPv6.h"
#include "stdio.h"

using namespace ipstack;

/**
 * This aspect just outputs all ICMPv6 messages on the screen
 */
aspect IPv6_ICMP_Receive_Output {
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") : 
	order( "IPv6_ICMP_Receive_Output","%" && !"IPv6_ICMP_Receive_Output" );
	
	advice execution("void ipstack::Demux::icmpv6_demux(ipstack::IPv6_Packet*, ipstack::ICMPv6_Packet*, unsigned, ipstack::Interface*)") &&
	args(packet, icmp_packet, payloadlen, interface) && that(demux) :
		around(IPv6_Packet* packet, ICMPv6_Packet* icmp_packet, unsigned payloadlen, Interface* interface, Demux& demux) {
		printf("ICMPv6: ");

		switch (icmp_packet->get_type()) {
			case 1: printf("Destination Unreachable"); break;
			case 2: printf("Packet Too Big"); break;
			case 3: printf("Time Exceeded"); break;
			case 4: printf("Parameter Problem"); break;
			case 128: printf("Echo Request"); break;
			case 129: printf("Echo Reply"); break;
			case 130: printf("Multicast Listener Query"); break;
			case 131: printf("Multicast Listener Report"); break;
			case 132: printf("Multicast Listener Done"); break;
			case 133: printf("Router Solicitation"); break;
			case 134: printf("Router Advertisement"); break;
			case 135: printf("Neighbor Solicitation"); break;
			case 136: printf("Neighbor Advertisement"); break;
			case 137: printf("Redirect Message"); break;
			case 138: printf("Router Renumbering"); break;
			case 139: printf("ICMP Node Information Query"); break;
			case 140: printf("ICMP Node Information Response"); break;
			case 141: printf("Inverse Neighbor Discovery Solicitation Message"); break;
			case 142: printf("Inverse Neighbor Discovery Advertisement Message"); break;
			case 143: printf("Version 2 Multicast Listener Report"); break;
			case 144: printf("Home Agent Address Discovery Request Message"); break;
			case 145: printf("Home Agent Address Discovery Reply Message"); break;
			case 146: printf("Mobile Prefix Solicitation"); break;
			case 147: printf("Mobile Prefix Advertisement"); break;
			case 148: printf("Certification Path Solicitation Message"); break;
			case 149: printf("Certification Path Advertisement Message"); break;
			case 150: printf("ICMP messages utilized by experimental mobility protocols such as Seamoby"); break;
			case 151: printf("Multicast Router Advertisement"); break;
			case 152: printf("Multicast Router Solicitation"); break;
			case 153: printf("Multicast Router Termination"); break;
			case 154: printf("FMIPv6 Messages"); break;
			case 155: printf("RPL Control Message"); break;
			case 156: printf("ILNPv6 Locator Update Message"); break;
			case 157: printf("Duplicate Address Request"); break;
			case 158: printf("Duplicate Address Confirmation"); break;
			default:
				printf("unknown");
		};

		printf("; Code %u; IPv6 Packetpointer %p\n", icmp_packet->get_code(), packet);
		
		tjp->proceed();
	}
};
