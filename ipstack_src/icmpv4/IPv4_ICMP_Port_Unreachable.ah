// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "../ipv4/IPv4.h"
#include "../demux/Demux.h"
#include "../router/Interface.h"
#include "ICMP.h"
#include "ICMPv4_Socket.h"

using namespace ipstack;


aspect IPv4_ICMP_Port_Unreachable {
	advice execution("void ipstack::Demux::error_port_not_reachable(ipstack::IPv4_Packet*, ipstack::Interface*)") &&
	args(packet, interface) && that(demux) :
		around(IPv4_Packet* packet, Interface* interface, Demux& demux) {

		ICMPv4_Socket &icmpv4instance = ICMPv4_Socket::instance();
		icmpv4instance.ipv4.set_dst_addr(packet->get_src_ipaddr());
		
		// As of ICMP RFC we have to echo back part of the errornous packet -> at least the ip header and some data (8 bytes)
		const UInt8 echoErrornousPacketSize = packet->get_ihl() * 4 + 8;
		demux.setDirectResponse(true);
		SendBuffer* sbi = icmpv4instance.requestSendBuffer(interface, echoErrornousPacketSize + ICMP_Packet::ICMP_HEADER_SIZE);
		if (sbi) {
			ICMP_Packet* icmp_error_reply = (ICMP_Packet*)sbi->getDataPointer();

			icmp_error_reply->set_type(ICMP_Packet::ICMP_TYPE_DESTINATION_UNREACHABLE);
			icmp_error_reply->set_code(ICMP_Packet::ICMP_CODE_PORT_UNREACHABLE);
			icmp_error_reply->set_quench(0);

			sbi->writtenToDataPointer(ICMP_Packet::ICMP_HEADER_SIZE);

			// ICMPv4 RFC: Append at least the errornous ipv4 packet + 8 byte payload to the responding icmp packet
			sbi->write(packet, echoErrornousPacketSize);

			icmpv4instance.send(sbi);
		}
	}
};
