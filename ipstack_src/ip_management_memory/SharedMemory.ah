// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "util/types.h"
#include "SharedMemory.h"

using namespace ipstack;

/**
 * Shared memory support
 */
aspect SharedMemoryAspect  {
	advice execution( "void os::init()" ) : after() {
		// Call constructor of global shared memory
		new(&sharedmemory) SharedMemory;
	}
	
	/**
	  * If the creation of a sendbuffer has been successfull, add it to the
	  * list of allocated management buffers. We have to keep track of all
	  * sendbuffers because next time we try to allocate one, we will go
	  * through the list and free those that have been send so far.
	  */
	advice execution( "% ipstack::SendBuffer::createInstance(...)" ) : before() {
		ipstack::Mempool* m = *tjp->arg<0>();
		// Only do something within management sockets
		if (m != &(sharedmemory.mempool))
			return;
		sharedmemory.freeAllUnused();
	}
	
	advice execution( "% ipstack::SendBuffer::createInstance(...)" ) : after() {
		ipstack::Mempool* m = *tjp->arg<0>();
		// Only do something within management sockets
		if (m != &(sharedmemory.mempool))
			return;

		SendBuffer* buffer = *tjp->result();
		
		if (buffer) {
			sharedmemory.insert(buffer);
		}
	}
};
