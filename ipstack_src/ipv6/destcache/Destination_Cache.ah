// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

/**
 * Introduce a destination cache for all IPv6 classes. Although this
 * is a core functionality to communicate with hosts which are not on-link
 * (through a router), it is not nessessary for a minimal working IPv6 solution
 * and therefore configurable. If you do not enable the destination cache, you
 * will not be able to communicate to hosts that are off-link.
 */
#pragma once

#include "Router_Destination_Cache_Slice.ah"
#include "IPV6_Destination_Cache_Slice.ah"
#include "../IPv6onSockets.h"
#include "ipstack/router/Router.h"
#include "ipstack/router/Interface.h"

using namespace ipstack;

aspect Router_Destination_Cache_aspect {

	// *** Affect class: Demux for registering the destination cache
	advice "ipstack::Router" : slice Router_IPv6_DEST_CACHE_Slice;

	// *** Affect class: IPV6. Add an NDPCacheEntry pointer that will be used
	// instead of a ndp-cache lookup.
	advice "ipstack::IPV6" : slice IPv6_DEST_CACHE_Slice;
	
	/**
	 * Set Lookup default value
	 */
	advice construction("ipstack::IPV6") &&
	that(socket) : after(IPV6& socket) {
		socket.nexthop_ndpcache_entry = 0;
	}
	
	/**
	 * Lookup destination cache:
	 * -------------------------
	 * Return on-link destination ip instead of just the user-set dest ip
	 */
	advice execution("% ipstack::IPV6::get_nexthop_ipaddr()") && that(ipv6) : around(IPV6& ipv6) {
		NDPCacheEntry* entry =  ipv6.get_nexthop_ndpcache_entry();
		if (!entry)
			tjp->proceed();
		else {
			*tjp->result() = entry->ipv6;
		}
	}

	/**
	 * Update destination cache:
	 * -------------------------
	 * A destination cache entry is usually updated by the link layer (ethernet) aspect.
	 * But if we know the router entry of the ndp-cache already, we can use it.
	 */
	advice execution("% ipstack::IPV6::resolveRoute(...)") && that(ipv6) : after(IPV6& ipv6) {
		AddressEntry* entry = *(tjp->result());
		
		if (!ipv6.interface || !entry)
			return;
		
		// if we have an on-link address: do nothing
		if (IPV6AddressScope::getIPv6AddressScope(entry->ipv6) == IPV6AddressScope::IPV6_SCOPE_LINKLOCAL) {
			ipv6.set_nexthop_ndpcache_entry(0);
			return;
		}
		
		// We will now look at that entry, if there is a router connected to it.
		if (entry->routerEntryPosition == AddressMemory::EntryUndefined) {
			// OK, bad situation: The destination address is neither link-local nor a router is known for it.
			// This is not our business: Just do nothing
			return;
		}

		// Yes there is a router connected to this entry. Use the routers ip as next hop.
		NDPCacheEntry* ndpentry = (NDPCacheEntry*)ipv6.interface->addressmemory.getEntryAtPosition(entry->routerEntryPosition);
		if (ndpentry->id != NDPCacheEntry::ID) {
			// This should not happen. The entry at the given position is not an ndp entry
			// Fix it!
			entry->routerEntryPosition = AddressMemory::EntryUndefined;
			return;
		}

		// Use the router as next hop
		ipv6.set_nexthop_ndpcache_entry(ndpentry);
	}

	/**
	 * We need a linked list for all IPv6 sockets in ::Router. This is necessary to be able to iterate over all sockets
	 * if an NDP Cache Entry expired and we have to clear the corresponding destination cache entries.
	 */
	
	// Do a resolveRoute after an interface coming up only after assigning a link local ip
	advice execution("void ipstack::Interface::setIPv6Up(bool)") :
		order("IPv6_add_link_local_address" , "Router_Destination_Cache_aspect");

	advice execution("void ipstack::Interface::setIPv6Up(bool)") && args(up) && that(interface) : around(bool up, Interface& interface) {
		// if ipv6 for an interface shuts down or starts up, we trigger a resolveRoute
		// This is usefull only if affected sockets have set a destination ip. This
		// will clear/refresh destination-cache related things.
		Router::Inst().setupDestinationCacheEntryForInterface(&interface);
		tjp->proceed();
	}


	advice destruction("ipstack::IPV6") &&
	that(socket) : before(IPV6& socket) {
		// remove this socket from Demux on destruction
		Router::Inst().removeFromDestinationCache(&socket);
	}

	advice construction("ipstack::IPV6") &&
	that(socket) : after(IPV6& socket) {
		socket.next = 0;
		// add this socket at Demux on construction
		Router::Inst().addToDestinationCache(&socket);
	}

	advice construction("ipstack::Router") &&
	that(router) : after(Router& router) {
		router.ipv6_head = 0;
	}
	
	/**
	 * NDP Cache entry expired
	 * -----------------------
	 * If an NDP Cache entry expires (e.g. not reachable anymore) clear the destination cache entry, too. This
	 * will cause a ndp lookup the next time while sending.
	 *
	 */
	advice execution("% ipstack::Interface::freeNDPCacheEntry(%)") && args(entry) : before(NDPCacheEntry* entry) {
		Router::Inst().clearDestinationCacheEntry(entry);
	}

	/**
	* Task: Address prefix expired
	* ----------------------------
	* If an address prefix expired we may use our src-ip for ongoing traffic but actually should restart the interface
	* with setIPv6Up(false)+setIPv6Up(true) to cancel all connections.
	*/

};
