#ifndef __IPv4_ARP_RECEIVE_AH__
#define __IPv4_ARP_RECEIVE_AH__

#include "util/types.h"
#include <string.h> //for memcpy
#include "../../router/Interface.h"
#include "../ARP.h"
#include "../ARP_Cache.h"
#include "../../Eth_Frame.h"

using namespace ipstack;


aspect IPv4_ARP_Receive {
  
  // *** Affect class: ARP_Cache
  advice execution("void ipstack::ARP_Cache::ipv4_reply(%, %, ipstack::Interface*)") &&
         args(src_hwaddr, src_ipv4_addr, interface) &&
         that(cache) :
         after(const UInt8* src_hwaddr, const UInt32* src_ipv4_addr, Interface* interface, ARP_Cache& cache) {

    Eth_ARP_IPv4_Packet* packet = cache.getNextFreePacket();
    if(packet != 0){
       packet->interface = interface;
       
       //Ethernet type field
       packet->get_Eth_Frame()->set_type(ARP_Packet::ETH_TYPE_ARP);

       //ARP Header
       packet->get_ARP_Packet()->set_hw_type(ARP_Packet::ARP_HW_TYPE_ETH);
       packet->get_ARP_Packet()->set_protocol_type(ARP_Packet::ARP_PROTOCOL_TYPE_IPV4);
       packet->get_ARP_Packet()->set_hw_addr_size(ARP_Packet::ARP_HW_ADDR_SIZE_ETH);
       packet->get_ARP_Packet()->set_protocol_addr_size(ARP_Packet::ARP_PROTOCOL_ADDR_SIZE_IPV4);
       packet->get_ARP_Packet()->set_opcode(ARP_Packet::ARP_REPLY);
       
       //Source HW-Addr for this ARP reply packet:
       const UInt8* i_hw_addr = interface->getAddress();
       memcpy(packet->arp_src_hwaddr, i_hw_addr, 6);
       packet->get_Eth_Frame()->set_src_hwaddr(i_hw_addr);
       
       //Source IP-Addr
       packet->arp_src_ipv4_addr = interface->getIPv4Addr();
       
       //Destination HW-Addr
       memcpy(packet->arp_dst_hwaddr, src_hwaddr, 6);
       packet->get_Eth_Frame()->set_dst_hwaddr(src_hwaddr);
       
       //Destination IP-Addr
       packet->arp_dst_ipv4_addr = *src_ipv4_addr;
       
       //Send the ARP reply packet
       interface->send(packet, Eth_ARP_IPv4_Packet::FRAMESIZE);
    }
  }
  
};

#endif // __IPv4_ARP_RECEIVE_AH__
