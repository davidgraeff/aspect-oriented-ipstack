// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "../../router/Interface.h"
#include "../ARP_Cache.h"
#include "../../ethernet/Eth_Frame.h"
#include "../../router/Router.h"
#include "ipstack/SendBuffer.h"

using namespace ipstack;

aspect IPv4_Socket_Ethernet_ARP_Aspect {
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv4_Ethernet" , "Sendbuffer_DirectResponse_Ethernet", "IPv4_Socket_Ethernet_ARP_Aspect");
		
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") && args(sendbuffer)  :
		around(SendBuffer* sendbuffer) {

		// only for IPv4
		if (tjp->that()->m_useipversion != 4) {
			tjp->proceed();
			return;
		}

		Interface* interface = tjp->that()->getUsedInterface();
		if (interface->getType() != Interface::ETHERNET) {
			tjp->proceed();
			return;
		}

		//we have an ethernet device
		Eth_Frame* eth_frame = (Eth_Frame*) sendbuffer->memstart_ethernet;
		

		// check if the mac is already set
		if (eth_frame->get_dst_hwaddr()[0] != 0) {
			tjp->proceed();
			return;
		}
		
		UInt32 lookup_ipv4_addr;
		if (tjp->that()->ipv4.using_gateway == false) {
			lookup_ipv4_addr = tjp->that()->ipv4.get_dst_addr(); //local
		} else {
			lookup_ipv4_addr = Router::Inst().ipv4_get_gateway_addr(); //gateway
		}
		
		ARP_Cache& cache = ARP_Cache::Inst(); //short name

		const UInt8* dst_hw_addr = cache.ipv4_lookup(lookup_ipv4_addr, interface);
		if (dst_hw_addr == 0) {
			sendbuffer->makeInvalid();
			return; //don't send this packet: destination MAC address unknown!
		}

		eth_frame->set_dst_hwaddr(dst_hw_addr);

		tjp->proceed();
		return;
	}

};
