// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __IPV4_ARP_SEND_AH__
#define __IPV4_ARP_SEND_AH__

#include "util/types.h"
#include <string.h> //for memcpy
#include "../../router/Interface.h"
#include "../ARP.h"
#include "../ARP_Cache.h"
#include "ARP_Cache_IPv4_Send_Slice.ah"

using namespace ipstack;


aspect IPv4_ARP_Send {
  // *** Affect class: ARP_Cache
  advice "ipstack::ARP_Cache" : slice ARP_Cache_IPv4_Send_Slice;
  
  advice execution("void ipstack::ARP_Cache::clear()") &&
         that(cache) : after(ARP_Cache& cache) {
    cache.ipv4_clear();
  }
  
  advice execution("void ipstack::ARP_Cache::ipv4_update(%, %)") &&
         args(ipv4_addr, hw_addr) &&
         that(cache) :
         after(const UInt32* ipv4_addr, const UInt8* hw_addr, ARP_Cache& cache) {

    unsigned selected_index = ARP_Cache::MAX_CACHE_ENTRIES;
    unsigned first_free_index = ARP_Cache::MAX_CACHE_ENTRIES;
    
    for(unsigned i=0; i<ARP_Cache::MAX_CACHE_ENTRIES; i++){      
      ARP_Cache::cache_entry& entry = cache.entries[i];
      if(entry.ipv4_addr == *ipv4_addr){
        selected_index = i;
        break;
      }
      else if(entry.ipv4_addr == 0){
        if(first_free_index == ARP_Cache::MAX_CACHE_ENTRIES){
          first_free_index = i;
        }
      }
    }
    if(selected_index == ARP_Cache::MAX_CACHE_ENTRIES){
      //ipv4_addr is not in cache table yet
      if(first_free_index != ARP_Cache::MAX_CACHE_ENTRIES){
        //there is a free cache slot left
        selected_index = first_free_index;
      }
      else{
        //evict cache entry
        //TODO
        selected_index = 0; //implement strategy
      }
    }

    ARP_Cache::cache_entry& entry = cache.entries[selected_index];
    entry.ipv4_addr = *ipv4_addr;
    memcpy(entry.hw_addr, hw_addr, 6);
  }
  
 
  advice execution("% ipstack::ARP_Cache::ipv4_lookup(%, ipstack::Interface*)") &&
         args(ipv4_addr, interface) && that(cache) :
         after(UInt32 ipv4_addr, Interface* interface, ARP_Cache& cache) {

    UInt8* hw_addr = cache.ipv4_find(ipv4_addr);
    for(int retries=0; (hw_addr==0) && (retries<3); retries++){
      cache.ipv4_request(ipv4_addr, interface);
      cache.ipv4_wait(ipv4_addr);
      hw_addr = cache.ipv4_find(ipv4_addr);
    }
    *tjp->result() = hw_addr;
    return;
  }
    

};
#endif // __IPV4_ARP_SEND_AH__
