// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __ARP_CACHE_IPV4_STATIC_SLICE__
#define __ARP_CACHE_IPV4_STATIC_SLICE__

#include "util/types.h"
#include <string.h> //for memcpy

using namespace ipstack;


slice class ARP_Cache_IPv4_Static_Slice {
  public:
  //Configuration:
  enum { MAX_STATIC_ENTRIES = 1 };
  
  private:
  
  struct static_entry {
    UInt32 ipv4_addr;
    UInt8 hw_addr[6];
  } static_entries[MAX_STATIC_ENTRIES];
  
  public:
  
  bool ipv4_insert(UInt32 ipv4_addr, const UInt8* hw_addr);
  void ipv4_remove(UInt32 ipv4_addr);
  
};

slice bool ARP_Cache_IPv4_Static_Slice::ipv4_insert(UInt32 ipv4_addr, const UInt8* hw_addr){
  for(int i=0; i<MAX_STATIC_ENTRIES; i++){
    static_entry& entry = static_entries[i];
    if(entry.ipv4_addr == 0){
      entry.ipv4_addr = ipv4_addr;
      memcpy(entry.hw_addr, hw_addr, 6);
      return true;
    }
  }
  return false;
}

slice void ARP_Cache_IPv4_Static_Slice::ipv4_remove(UInt32 ipv4_addr){
  for(int i=0; i<MAX_STATIC_ENTRIES; i++){
    static_entry& entry = static_entries[i];
    if(entry.ipv4_addr == ipv4_addr){
      entry.ipv4_addr = 0;
      return;
    }
  }
}

#endif // __ARP_CACHE_IPV4_STATIC_SLICE__ 
