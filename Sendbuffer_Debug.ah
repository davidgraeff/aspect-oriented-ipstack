// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2013 David GrÃ¤ff

#pragma once
#include "util/types.h"
#include "stdio.h"
#include "ipstack/SendBuffer.h"
#include "ipstack/router/Router.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/ipv4/IPv4.h"
#include "ipstack/ipv6/IPv6AddressUtilities.h"
#include "ipstack/ip_management_memory/SharedMemory.h"
#include "ipstack/Sendbuffer_DebugInfo_Slice.ah"
#define MARK_MSG_LEN 100
using namespace ipstack;

aspect sendbuffer_debug {
	struct mark_msg_struct {
		SendBuffer* ptr;
		char msg[MARK_MSG_LEN];
	};

	mark_msg_struct messages[SharedMemory::SLOTS];
	unsigned nextMsg;
	
	advice execution( "void os::init()" ) : after() {
		nextMsg = 0;
	}

	advice execution( "% ipstack::SendBuffer::createInstance(...)" ) : after() {
		SendBuffer* b = *tjp->result();
		if (b != 0) {
			printf("SendBuffer: Allocated %p!\n", b);
			// clear messages with same SendBuffer pointer.
			for (int i=0;i<SharedMemory::SLOTS;++i) {
				if (messages[i].ptr == b)
					messages[i].ptr = 0;
			}
			// add somewhere in the messages array
			++nextMsg; if (nextMsg>=SharedMemory::SLOTS) nextMsg = 0;
			memset( &(messages[nextMsg]), 0, sizeof(mark_msg_struct) );
			messages[nextMsg].ptr = b;
		}
	}

	
	advice call("% ipstack::Interface::send(...)") && within("% ipstack::%_Socket::send(...)") : before() {
		// compute address of the senbuffer that is around the raw data
		SendBuffer* buffer = (SendBuffer*) (((char*)*tjp->arg<0>()) - sizeof(SendBuffer));
		// if it is a sendbuffer and the computation above is correct, we can read out the interface
		// and can compare it to the current one
		if (buffer->getInterface() == tjp->target()) {
			printf("SendBuffer: Send %p!\n", buffer);
			buffer->printAdditionalInfo();
		} else { // maybe the data isn't from a sendbuffer. print out a more general message
			printf("Send low level %p, %p, I: %p==%p!\n", *tjp->arg<0>(), buffer, tjp->target(), buffer->getInterface());
		}
	}
	
	advice execution("% ipstack::SendBuffer::mark(const char*)") && args(str) && that(sendbuffer) : after(const char* str, SendBuffer& sendbuffer) {
		unsigned len = strlen(str);
		len = ((len > MARK_MSG_LEN-1) ? MARK_MSG_LEN-1 : len);
		
		for (int i=0;i<SharedMemory::SLOTS;++i) {
			if (messages[i].ptr == &sendbuffer) {
				strncpy(&(messages[i].msg[0]), str, len);
				break;
			}
		}
	}
};
