// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once
#include "../router/Interface.h"
#include "ipstack/SendBuffer.h"

using namespace ipstack;


aspect InternetChecksum_Tx_Offloading_all {

	enum {
		IP_TYPE_UDP = 17,
		IP_TYPE_TCP = 0x6,
		IPV4_TYPE_ICMP = 0x1
	};

	// *** Affect class 'InternetChecksum'
	/**
	 * Do not compute the payload checksum if the hardware is capable of doing this.
	 */
	advice call("% ipstack::InternetChecksum::computePayload(%, %, ipstack::Interface*)") &&
	args(payloaddata,payloadlen, interface) :
		around(UInt8* payloaddata, UInt16 payloadlen, Interface* interface) {

		if ((interface != 0) && (interface->hasTransmitterHardwareChecksumming())) {
			*tjp->result() = 0; //computePayload is done by hardware
		} else {
			tjp->proceed();
		}
	}

	advice execution("% ipstack::InternetChecksum::invert(%, ipstack::Interface*)") &&
	args(csum, interface) :
		around(UInt16 csum, Interface* interface) {

		if ((interface != 0) && (interface->hasTransmitterHardwareChecksumming())) {
			*tjp->result() = csum; // do not invert partial checksum
		} else {
			tjp->proceed();
		}
	}

	// execution-advice ordering: always execute this aspect at last, but before "Sendbuffer_IPv4_Checksum" or "Sendbuffer_ICMPv4_checksum"
	advice execution("void ipstack::%_Socket::send(ipstack::SendBuffer*,ipstack::Interface*)") :
		order("%" && !"InternetChecksum_Tx_Offloading_all" && !"Sendbuffer_IPv4_Checksum" && !"Sendbuffer_ICMPv4_checksum",
			  "InternetChecksum_Tx_Offloading_all",
			  "Sendbuffer_IPv4_Checksum",
			  "Sendbuffer_ICMPv4_checksum");

	advice execution("void ipstack::%UDP_Socket::send(ipstack::SendBuffer*,ipstack::Interface*)")  &&
		args(dataToSend, interface):
		around(SendBuffer* dataToSend, Interface* interface) {

		if (interface->hasTransmitterHardwareChecksumming()) {
			//call specialized send function for checksum offloading
			unsigned ip_header_size = ((char*)dataToSend->memstart_transport - (char*)dataToSend->memstart_ip);
			//printf("udp send with hardware checksum ip: %u, len: %u\n", ip_header_size, dataToSend->getSize());
			interface->send(dataToSend->getDataStart(), dataToSend->getSize(), false, ip_header_size);
			return; // we do not execute Sendbuffer_IPv4_Checksum or other checksum computations
		}
		tjp->proceed();
	}
	
	advice execution("void ipstack::%TCP_Socket::send(ipstack::SendBuffer*,ipstack::Interface*)")  &&
		args(dataToSend, interface):
		around(SendBuffer* dataToSend, Interface* interface) {

		if (interface->hasTransmitterHardwareChecksumming()) {
			//call specialized send function for checksum offloading
			unsigned ip_header_size = ((char*)dataToSend->memstart_transport - (char*)dataToSend->memstart_ip);
			//printf("tcp send with hardware checksum ip: %u, len: %u\n", ip_header_size, dataToSend->getSize());
			interface->send(dataToSend->getDataStart(), dataToSend->getSize(), true, ip_header_size);
			return; // we do not execute Sendbuffer_IPv4_Checksum or other checksum computations
		}
		tjp->proceed();
	}
	
	// Do not do that in hardware: Computation is wrong on my network nic
	advice execution("void ipstack::ICMPv4_Socket::send(ipstack::SendBuffer*,ipstack::Interface*)")  &&
		args(dataToSend, interface):
		around(SendBuffer* dataToSend, Interface* interface) {

		if (interface->hasTransmitterHardwareChecksumming()) {
			//call specialized send function for checksum offloading
			unsigned ip_header_size = ((char*)dataToSend->memstart_transport - (char*)dataToSend->memstart_ip);
			//printf("icmp send with hardware checksum ip: %u, len: %u\n", ip_header_size, dataToSend->getSize());
			interface->send(dataToSend->getDataStart(), dataToSend->getSize(), false, ip_header_size);
			return; // we do not execute Sendbuffer_IPv4_Checksum or other checksum computations
		}
		tjp->proceed();
	}
};
