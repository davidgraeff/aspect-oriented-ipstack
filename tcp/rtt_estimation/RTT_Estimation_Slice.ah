#ifndef __TCP_RTT_ESTIMATION_SLICE__
#define __TCP_RTT_ESTIMATION_SLICE__

#include "util/types.h"
#include "../../Clock.h"

slice class TCP_RTT_Estimation_Slice {
  private:
  enum { //LOWER_RTO_BOUND = 1000U, //rfc 2988
         LOWER_RTO_BOUND = 200U, //Linux uses 200ms min RTO
         UPPER_RTO_BOUND = 64000U }; //only used for exponential backoff (max. 64sec)
  
  UInt32 rtt_seqnum; //the sequence number for current measuring
  UInt64 rrt_time; //when was 'rtt_seqnum' send
  bool rrt_active; //there is maesure going on
  
  Int32 srtt; //the smoothed RTT (scaled X 8)
  Int32 rtt_var; // variation (mean deviation) of RTT (scaled X 4)
  UInt32 rto; //retransmission timeout
  
  void update_SRTT(Int32 meassured_rtt){
    //see "Internetworking with TCP/IP Volume II, page 278"
    //for further explainations
    if(srtt == 0){
      //this is the first RTT meassure, see RFC 2988 page 2:
      srtt = meassured_rtt<<3; //srtt = "meassured_rtt"
      rtt_var = meassured_rtt<<1; // rtt_var = "meassured_rtt/2"
      rto = meassured_rtt + (rtt_var<<1); // RTO := SRTT + 4*deviation(SRTT)
      return;
    }
    
    Int32 error = meassured_rtt - (srtt >> 3);
    srtt += error; // srtt = srtt + error/8
    
    if(error < 0){
      error = -error;
    }
    rtt_var += error - (rtt_var >> 2); // rtt_var = rtt_var + (err - rtt_var)/4
    
    rto = (srtt>>3) + rtt_var; // RTO := SRTT + 4*deviation(SRTT)
  }
  
  void rtt_init(){
    rrt_active = false;
    srtt = 0;
    rtt_var = 3000; //see "TCP/IP Illustrated Vol.1, page 305"
    rto = 6000; //6 seconds (see above)
  }
  
  void start_RTT_Estimation(){
    if(rrt_active == false){
      rrt_active = true;
      rtt_seqnum = seqnum_next;
      rrt_time = Clock::now();
    }
  }
  
  void abort_RTT_Estimation(){
    rrt_active = false;
  }
  
  void update_RTT_Estimation(UInt32 acknum){
    if(rrt_active == true){
      if(TCP_Segment::SEQ_LT(rtt_seqnum, acknum)){
        //rtt_seqnum is ack'ed now
        UInt32 meassured_rtt = Clock::ticks_to_ms(Clock::now() - rrt_time); //in milliseconds
        
        //crazy cast :-)
        Int32 msec = (Int32) (((UInt32) meassured_rtt) & 0x7FFFFFFFUL);
        update_SRTT(msec);
        if(rto < LOWER_RTO_BOUND){
          rto = LOWER_RTO_BOUND;
        }
        rrt_active = false;
      }
    }
  }
  
  void rto_backoff(){
    if(rto < UPPER_RTO_BOUND){
      rto = rto << 1; //double estimated RTO
    }
    else{
      rto = UPPER_RTO_BOUND;
      srtt = 0; //restart RTO estimation
    }
  }
  
};

#endif // __TCP_RTT_ESTIMATION_SLICE__
