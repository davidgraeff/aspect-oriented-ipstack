// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "../router/Interface.h"
//#include "TCP_Sendbuffer_Slice.ah"
#include "TCP_Socket.h"
#include "TCP.h"
#include "ipstack/SendBuffer.h"
#include "util/types.h"

using namespace ipstack;

/**
 * Set TCP as next header protocol in the the IPv4 Header.
 * We do not need to add a TCP Header here, that is done in the
 * TCP Socket. The Sendbuffer API is therefore not usable outside
 * of the TCP Socket class.
 */
aspect Sendbuffer_TCP  {
	// First add the IP Header after that execute this TCP aspect
	advice execution("% ipstack::%_Socket::prepareSendBuffer(...)") : order("Sendbuffer_IPv%" , "Sendbuffer_TCP");

// 	advice execution("void ipstack::TCP_Socket::writeHeader%(...)") && args(sendbuffer) :
// 	before(SendBuffer* sendbuffer) {
// 		sendbuffer->memstart_transport = sendbuffer->data;
// 	}
	
	advice execution("% ipstack::%TCP_Socket::prepareSendBuffer(...)") && args(sendbuffer) :
		after(SendBuffer* sendbuffer) {
		// set ip next header protocol to TCP
		*(sendbuffer->nextheaderfield_ip) = TCP_Segment::IP_TYPE_TCP;
		sendbuffer->memstart_transport = sendbuffer->data;
	}
};
