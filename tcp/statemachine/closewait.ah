// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2011 Christoph Borchert


#ifndef __TCP_STATE_CLOSEWAIT_AH__
#define __TCP_STATE_CLOSEWAIT_AH__

using namespace ipstack;
  
slice class TCP_State_Closewait {
private:
void closewait(TCP_Segment* segment, unsigned len) {
  if(segment != 0){
    // new tcp segment received:
    if(handleRST(segment)){ return; }
    if(handleSYN_final(segment)){ return; }
    
    UInt32 seqnum = segment->get_seqnum();
    UInt32 acknum = segment->get_acknum();
    
    if(segment->has_ACK()){
      handleACK(acknum);
    }
    
    if(segment->has_FIN()){
      //updateHistory(false); // free unused segments stored in history //XXX: now done in alloc()
      //Our ACK from state ESTABLISHED got lost. retransmit!
      sendACK(FIN_seqnum + 1U); // a FIN consumes one sequence number
    }
    
    updateSendWindow(segment, seqnum, acknum);
    free(segment);
  }
  else{
    // there are no more segments in the input buffer
    updateHistory(); //cleanup packets which are not used anymore (and trigger retransmissions)
    
    if(receiving == true){
      //There will be no more incoming data segments.
      // => flush receiveBuffer if possible
      unsigned recvBytes = receiveBuffer.getRecvBytes();
      if(application_buflen > recvBytes){
        application_buflen = recvBytes; //only copy recvBytes
      }
      application_recv_len += application_buflen; //increment recv_len byte count
      receiveBuffer.copyData(application_buf, application_buflen);
      receiving = waiting = false; //never block on reading in this state
      return;
      //TODO: urgend data?
    }
    else if(waiting == true) {
      //Sending
      processSendData(); //try to send new segments if possible
      if( (application_buflen == 0) && history.isEmpty()){
        waiting = false;
        return;
      }
      else{
        block(history.getNextTimeout());
      }
    }
  }
}

};

#endif // __TCP_STATE_CLOSEWAIT_AH__
