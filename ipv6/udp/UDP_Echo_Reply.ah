// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2011 Christoph Borchert, 2012 David GrÃ¤ff

#pragma once

#include "ipstack/udp/UDP.h"
#include "ipstack/udp/Management_UDP_Socket.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/demux/Demux.h"
#include "ipstack/router/Interface.h"

using namespace ipstack;


aspect UDP_IPv6_ECHO_REPLY {
	// echo service before any real application 
	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") :
		order("UDP_IPv6_ECHO_REPLY","IPv6_UDP_Receive");

	advice execution("% ipstack::Demux::ipv6_payload_demux(ipstack::Interface*, ipstack::IPv6_Packet*, void*&, unsigned&, unsigned char& )") &&
	args(interface, packet, payload, payload_length, nextHeader) && that(demux) :
		around(Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader, Demux& demux) {

		if (nextHeader != UDP_Packet::IP_TYPE_UDP) {
			tjp->proceed();
			return;
		}

		if (payload_length < UDP_Packet::UDP_HEADER_SIZE) {
			return; //len too small! Drop packet
		}
		
		// udp payload length = payload_length - udp header
		unsigned len =  payload_length - UDP_Packet::UDP_HEADER_SIZE;
		
		// extract udp packet and dest port
		UDP_Packet* udp_packet = (UDP_Packet*) payload;
		const UInt16 udp_packet_dport = udp_packet->get_dport();

		// UDP Echo Service is on port 7
		if (7 == udp_packet_dport) {
			*(tjp->result()) = true; // stop parsing ipv6 packet
			
			// set destination address: this is necessary before calling getMaxPayloadLength() to take the MTU of
			// the destination interface into account
			Management_UDP_Socket &udpmanagmentinstance = Management_UDP_Socket::instance();
			udpmanagmentinstance.ipv6.set_dst_addr(packet->get_src_ipaddr());
			UInt16 maxlen = udpmanagmentinstance.getMaxPayloadLength();
			if (len > maxlen) {
				len = maxlen;
			}

			demux.setDirectResponse(true);
			SendBuffer* sbi = udpmanagmentinstance.requestSendBuffer(interface, len+UDP_Packet::UDP_HEADER_SIZE);
			//we have an echo request packet
			if (sbi) {
				UDP_Packet* reply_udp = (UDP_Packet*)sbi->memstart_transport;
				reply_udp->set_dport(udp_packet->get_sport());
				reply_udp->set_sport(udp_packet->get_dport());
				reply_udp->set_length(len+UDP_Packet::UDP_HEADER_SIZE); // incl. UDP_Packet::UDP_HEADER_SIZE!
				reply_udp->set_checksum(0);
				sbi->writtenToDataPointer(UDP_Packet::UDP_HEADER_SIZE);
				// copy udp payload
				sbi->write(udp_packet->get_data(), len);

				udpmanagmentinstance.send(sbi);
			}
		} else {
			tjp->proceed();
		}
	}
};
