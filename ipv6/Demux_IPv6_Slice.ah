// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "IPv6.h"
#include "../router/Interface.h"

using namespace ipstack;

slice class Demux_IPv6_Slice {
private:
    void ipv6_demux ( IPv6_Packet* packet, unsigned len, Interface* interface ) {
        // Go through all linked next headers
        unsigned remainingLength = packet->get_payload_len();
		void* payload = (void*)packet->get_payload();
        unsigned char nextHeader = packet->get_nextheader();
		
        while ( remainingLength ) {
			if (ipv6_payload_demux ( interface, packet, payload, remainingLength, nextHeader )) {
				return;
			}
        }

		printf("Demux_IPv6_Slice not handled\n");
        error_no_protocol_handler_v6(packet, interface);
    }

    /**
     * An IPv6 Header may have several extension headers and upper layer protocols (udp, tcp)
     * structured by a "Linked" list: Every extension header start with a next-header byte and
     * a length byte, that indicates the size of the current extension header in a 8-byte-unit (excluding the first
     * eight bytes)
     */
    bool ipv6_payload_demux ( Interface* interface, IPv6_Packet* packet, void*& payload, unsigned& payload_length, unsigned char& nextHeader ) {
        // If no aspect intercepted this method so far, the payload propably is a
        // IPv6 header that is not recogniced. Aspects that intercept this and consume
        // all remaining bytes should use an around advice and return true.
        const unsigned header_extension_length_in_bytes = (( UInt8*)payload)[1]*8 + 8;
		if ( !payload_length || header_extension_length_in_bytes > payload_length )
            return true;

		nextHeader = (( unsigned char* ) payload)[0];
        // change payload pointer and reduce length
		payload_length -= header_extension_length_in_bytes;
		payload = (( char* )payload) + header_extension_length_in_bytes;
		return false;
    }
    
    /**
	 * Call this method if the ipv6 ttl is 0
	 */
	void error_ttl_v6(IPv6_Packet* ip_packet, Interface* interface) {
		//Aspects to be weaved here!
	}
	
	/**
	 * Call this method if there is no protocol handler for the given protocol
	 */
	void error_no_protocol_handler_v6(IPv6_Packet* ip_packet, Interface* interface) {
		//Aspects to be weaved here!
	}
	
	/**
	 * Call this method if there is an unknown option
	 */
	void error_option_unknown_v6(IPv6_Packet* ip_packet, Interface* interface) {
		//Aspects to be weaved here!
	}
	
	/**
	 * Call this if the receiving queue is full
	 */
	void error_receiving_queue_full_v6(IPv6_Packet* ip_packet, const Interface* interface) {
		//Aspects to be weaved here!
	}
	/**
	 * Call this if the received packet does not fit into one of the available memory blocks
	 */
	void error_receiving_memory_too_small_v6(IPv6_Packet* ip_packet, const Interface* interface) {
		//Aspects to be weaved here!
	}
};
