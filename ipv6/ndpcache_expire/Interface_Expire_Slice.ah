// This file is part of CiAO/IP.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiAO/IP.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright (C) 2012 David Gr√§ff

#pragma once

#include "util/types.h"
#include "ipstack/ipv6/ndpcache/NDPCacheConfig.h"
#include "ipstack/ipv6/IPv6AddressUtilities.h"
#include "ipstack/ipv6/AddressMemory.h"
#include "ipstack/ipv6/IPv6.h"
#include "ipstack/ipv6/IPv6onSockets.h"
#include "ipstack/as/Clock.h"
#include <string.h>

using namespace ipstack;

slice class Interface_NDPCacheExpire_Slice
{
	public:
		
		/**
		 * This is part of the neighbour unreachablility detection.
		 * This method have to be called by upper layer protocols. Examples:
		 * - TCP: if no responses are received and retransmits fail
		 * - NDP messages: No response from remote even after retransmits
		 * - UDP Userspace: Expected response is missing
		 * [A Neighbour Solicitation Message should be send now.]
		 */
		void suspect_unreachable(ipv6addr addr) {
			NDPCacheEntry* entry = ndpcache_find(addr);
			if (!entry) return;
			entry->expire_value = 0; // this entry would be removed by the next refresh cycle
			entry->state = NDPCacheEntry::NDPCacheEntryState_Stale; // do not use this entry for traffic
		}

		// May be influenced by NDP_Router_Solicitation to not increase the expire_value but instead
		// wait for a router advertisement
		void ipv6_router_entry_refresh(NDPCacheEntry* entry) {
			// Basic method: Just set the router entry to a higher importance
			// It would be better of couse, if we instead send out a NDP_Router_Solicitation
			entry->expire_value = NDPCacheEntry::IMPORTANCE_router;
		}
		
		// May be influenced by NDP_Neighbor_Solicitation to not increase the expire_value but instead
		// wait for a neighbor advertisement
		void ipv6_nonrouter_entry_refresh(NDPCacheEntry* entry) {
			// Basic method: Just set the entry to a higher importance
			// It would be better of couse, if we instead send out a NDP_Neighbour_Solicitation
			entry->expire_value = NDPCacheEntry::IMPORTANCE_good_to_know;
		}

		/**
		 * Always use this method if you use an NDP Cache entry anywhere outside of this class.
		 * This method make sure that a used entry will not be dismissed from the ndp cache.
		 * @param entry The ndp cache entry
		 */
		void ipv6_useentry(NDPCacheEntry* entry) {
			// This entry is used. We have to make sure it will not be dismissed from the ndp cache
			// If the importance is very low, set it to a higher value
			if (entry->expire_value < NDPCACHE_TRESHOLD_REQUIRE_SOLICITATION) { // Feintuning
				if (entry->expire_value==1) // marked as "to be renewed"
					return;
				entry->expire_value = 1;
				if (entry->isRouter) {
					ipv6_router_entry_refresh(entry);
				} else
					ipv6_nonrouter_entry_refresh(entry);
			} else if (entry->expire_value & 1) {
				// The importance is already high. But at least
				// if the expire rate timer reduced the importance of this entry: increase it again.
				entry->expire_value += NDPCACHE_EXPIRE_RATE_PER_MINUTE - 1;
			}
		}

		/**
		 * Kill all entries that have an importance of NDPCACHE_EXPIRE_RATE_PER_MINUTE or lower.
		 * This method should be called regulary (~2min).
		 * @return Return number of released entries
		 */
		UInt8 releaseOldEntries() {
			UInt8 nextEntry = 0;
			UInt8 releasedEntries = 0;
			while (NDPCacheEntry* entry = addressmemory.findEntry<NDPCacheEntryType>(&nextEntry)) {
				if (entry->expire_value < NDPCACHE_EXPIRE_RATE_PER_MINUTE) {
					freeNDPCacheEntry(entry);
					++releasedEntries;
				} else if (entry->expire_value != 255) {
					// Lower the expire value and set the first bit to mark this
					// Do not decrease expire_values of 255. Those entries are fixed.
					entry->expire_value = (entry->expire_value - NDPCACHE_EXPIRE_RATE_PER_MINUTE) | 1;
				}
			}
			return releasedEntries;
		}

		/**
		 * Release an entry that is older than the given value.
		 * For example if the ndp cache is full, but we have to save an
		 * important link layer address lookup.
		 */
		void releaseEntryBelowImportance(UInt8 importance_below_value) {
			NDPCacheEntry* oldest_entry = 0;

			UInt8 nextEntry = 0;
			while (NDPCacheEntry* entry = addressmemory.findEntry<NDPCacheEntryType>(&nextEntry)) {
				if (entry->expire_value != 255 && entry->expire_value < importance_below_value) {
					importance_below_value = entry->expire_value;
					oldest_entry = entry;
				}
			}

			if (oldest_entry)
				freeNDPCacheEntry(oldest_entry);
		}
		
		void update_NDPCacheEntry_importance(NDPCacheEntry* entry, NDPCacheEntry::NDPCacheEntryImportance importance_level) {
			entry->expire_value |= importance_level; // minimum of (importance level and existing value)
		}
};
