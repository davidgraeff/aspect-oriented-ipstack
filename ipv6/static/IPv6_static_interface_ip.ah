// This file is part of CiAO/IPv6-Extension.
//
// CiAO/IP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CiAO/IP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with CiAO/IPv6-Extension.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright (C) 2012 David GrÃ¤ff

#pragma once

#include "../cfAttribs.h"
#include "ipstack/router/Router.h"
#include "ipstack/ipv6/IPv6AddressUtilities.h"

using namespace ipstack;

#define IP_AS_STRING IP_MAKE_STRING(cfIPSTACK_IFCFG0_IPV6)

/**
  * Add a static ip address. The address given by the configuration will be analyed regarding its
  * scope (LINK LOCAL or UNICAST etc) and the scopes prefix length will be determined (LINK LOCAL for
  * example always has a prefix length of 64 bits). The makeIPv6AddressByPrefix method is called
  * with the address and the determined prefix length. An address duplication will be triggered.
  */
aspect ipstack_ifcfg0_v6_static_ip  {
	advice execution( "void os::init()" ) : after() {
		Interface* interface = Router::Inst().get_interface(0);
		if(interface) {
			ipstack::ipv6addr addr;
			if (!parse_ipv6_addr(IP_AS_STRING, addr)) {
				return;
			}
			// add a static IP address
			// The state is set to preliminary: An address duplication check will be performed
			interface->makeIPv6AddressByPrefix(addr, IPV6AddressScope::getIPv6AddressScopePrefixLength(IPV6AddressScope::getIPv6AddressScope(addr)));
		}
	}
};
